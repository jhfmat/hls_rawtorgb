// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rgb2bayer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rgb2bayer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rgb2bayer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> rgb2bayer::ap_ST_fsm_state1 = "1";
const sc_lv<3> rgb2bayer::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> rgb2bayer::ap_ST_fsm_state5 = "100";
const sc_lv<32> rgb2bayer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool rgb2bayer::ap_const_boolean_1 = true;
const sc_lv<1> rgb2bayer::ap_const_lv1_0 = "0";
const sc_lv<1> rgb2bayer::ap_const_lv1_1 = "1";
const sc_lv<2> rgb2bayer::ap_const_lv2_0 = "00";
const sc_lv<2> rgb2bayer::ap_const_lv2_2 = "10";
const sc_lv<2> rgb2bayer::ap_const_lv2_3 = "11";
const sc_lv<2> rgb2bayer::ap_const_lv2_1 = "1";
const sc_lv<32> rgb2bayer::ap_const_lv32_1 = "1";
const bool rgb2bayer::ap_const_boolean_0 = false;
const sc_lv<64> rgb2bayer::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<31> rgb2bayer::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<64> rgb2bayer::ap_const_lv64_1 = "1";
const sc_lv<31> rgb2bayer::ap_const_lv31_1 = "1";
const sc_lv<32> rgb2bayer::ap_const_lv32_10 = "10000";
const sc_lv<32> rgb2bayer::ap_const_lv32_17 = "10111";
const sc_lv<32> rgb2bayer::ap_const_lv32_8 = "1000";
const sc_lv<32> rgb2bayer::ap_const_lv32_F = "1111";
const sc_lv<32> rgb2bayer::ap_const_lv32_2 = "10";

rgb2bayer::rgb2bayer(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( s_axis_video_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( s_axis_video_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( s_axis_video_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( s_axis_video_V_data_V_0_vld_out );
    sensitive << ( exitcond_flatten_fu_197_p2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( exitcond_flatten_reg_324 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( exitcond_flatten_reg_324_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( m_axis_video_V_keep_V_1_ack_in );
    sensitive << ( m_axis_video_V_strb_V_1_ack_in );
    sensitive << ( m_axis_video_V_user_V_1_ack_in );
    sensitive << ( m_axis_video_V_last_V_1_ack_in );
    sensitive << ( m_axis_video_V_id_V_1_ack_in );
    sensitive << ( m_axis_video_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_197_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_ack_in );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_ack_in );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_ack_in );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_ack_in );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_ack_in );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_ack_in );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_j_phi_fu_156_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( j_reg_152 );
    sensitive << ( j_cast1_mid2_v_reg_333 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_ack_in );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_ack_in );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_ack_in );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_ack_in );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_ack_in );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_ack_in );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bound_fu_182_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bound_fu_182_p00 );

    SC_METHOD(thread_bound_fu_182_p00);
    sensitive << ( hsize_in );

    SC_METHOD(thread_bound_fu_182_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bound_fu_182_p10 );

    SC_METHOD(thread_bound_fu_182_p10);
    sensitive << ( vsize_in );

    SC_METHOD(thread_bound_fu_182_p2);
    sensitive << ( bound_fu_182_p0 );
    sensitive << ( bound_fu_182_p1 );

    SC_METHOD(thread_exitcond_flatten_fu_197_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_flatten_reg_141 );
    sensitive << ( bound_reg_319 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_1_fu_306_p3);
    sensitive << ( tmp_3_fu_192_p2 );
    sensitive << ( i_op_fu_300_p2 );

    SC_METHOD(thread_i_cast1_mid2_fu_230_p2);
    sensitive << ( tmp_3_fu_192_p2 );
    sensitive << ( tmp_2_fu_226_p1 );

    SC_METHOD(thread_i_cast_fu_188_p1);
    sensitive << ( i_reg_163 );

    SC_METHOD(thread_i_op_fu_300_p2);
    sensitive << ( i_reg_163 );

    SC_METHOD(thread_indvar_flatten_next_fu_202_p2);
    sensitive << ( indvar_flatten_reg_141 );

    SC_METHOD(thread_j_cast1_mid2_v_fu_214_p3);
    sensitive << ( ap_phi_mux_j_phi_fu_156_p4 );
    sensitive << ( tmp_3_fu_192_p2 );
    sensitive << ( j_s_fu_208_p2 );

    SC_METHOD(thread_j_s_fu_208_p2);
    sensitive << ( ap_phi_mux_j_phi_fu_156_p4 );

    SC_METHOD(thread_m_axis_video_TDATA);
    sensitive << ( m_axis_video_V_data_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_reg_324_pp0_iter1_reg );

    SC_METHOD(thread_m_axis_video_TDEST);
    sensitive << ( m_axis_video_V_dest_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TID);
    sensitive << ( m_axis_video_V_id_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TKEEP);
    sensitive << ( m_axis_video_V_keep_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TLAST);
    sensitive << ( m_axis_video_V_last_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TSTRB);
    sensitive << ( m_axis_video_V_strb_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TUSER);
    sensitive << ( m_axis_video_V_user_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_ack_in);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_data_V_1_data_out);
    sensitive << ( m_axis_video_V_data_V_1_payload_A );
    sensitive << ( m_axis_video_V_data_V_1_payload_B );
    sensitive << ( m_axis_video_V_data_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_data_V_1_load_A);
    sensitive << ( m_axis_video_V_data_V_1_sel_wr );
    sensitive << ( m_axis_video_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_data_V_1_load_B);
    sensitive << ( m_axis_video_V_data_V_1_sel_wr );
    sensitive << ( m_axis_video_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_data_V_1_sel);
    sensitive << ( m_axis_video_V_data_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_data_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_data_V_1_vld_out);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_ack_in);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_data_out);
    sensitive << ( m_axis_video_V_dest_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_sel);
    sensitive << ( m_axis_video_V_dest_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_vld_out);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_id_V_1_ack_in);
    sensitive << ( m_axis_video_V_id_V_1_state );

    SC_METHOD(thread_m_axis_video_V_id_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_id_V_1_data_out);
    sensitive << ( m_axis_video_V_id_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_id_V_1_sel);
    sensitive << ( m_axis_video_V_id_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_id_V_1_vld_out);
    sensitive << ( m_axis_video_V_id_V_1_state );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_ack_in);
    sensitive << ( m_axis_video_V_keep_V_1_state );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_data_out);
    sensitive << ( m_axis_video_V_keep_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_sel);
    sensitive << ( m_axis_video_V_keep_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_vld_out);
    sensitive << ( m_axis_video_V_keep_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_ack_in);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_last_V_1_data_out);
    sensitive << ( m_axis_video_V_last_V_1_payload_A );
    sensitive << ( m_axis_video_V_last_V_1_payload_B );
    sensitive << ( m_axis_video_V_last_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_last_V_1_load_A);
    sensitive << ( m_axis_video_V_last_V_1_sel_wr );
    sensitive << ( m_axis_video_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_last_V_1_load_B);
    sensitive << ( m_axis_video_V_last_V_1_sel_wr );
    sensitive << ( m_axis_video_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_last_V_1_sel);
    sensitive << ( m_axis_video_V_last_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_last_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_last_V_1_vld_out);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_ack_in);
    sensitive << ( m_axis_video_V_strb_V_1_state );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_data_out);
    sensitive << ( m_axis_video_V_strb_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_sel);
    sensitive << ( m_axis_video_V_strb_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_vld_out);
    sensitive << ( m_axis_video_V_strb_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_ack_in);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_user_V_1_data_out);
    sensitive << ( m_axis_video_V_user_V_1_payload_A );
    sensitive << ( m_axis_video_V_user_V_1_payload_B );
    sensitive << ( m_axis_video_V_user_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_user_V_1_load_A);
    sensitive << ( m_axis_video_V_user_V_1_sel_wr );
    sensitive << ( m_axis_video_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_user_V_1_load_B);
    sensitive << ( m_axis_video_V_user_V_1_sel_wr );
    sensitive << ( m_axis_video_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_user_V_1_sel);
    sensitive << ( m_axis_video_V_user_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_user_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_324 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_user_V_1_vld_out);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_newSel8_fu_284_p3);
    sensitive << ( tmp_1_fu_272_p2 );
    sensitive << ( p_Result_3_fu_262_p4 );
    sensitive << ( p_Result_s_fu_248_p4 );

    SC_METHOD(thread_or_cond_fu_278_p2);
    sensitive << ( tmp_fu_222_p1 );
    sensitive << ( i_cast1_mid2_fu_230_p2 );

    SC_METHOD(thread_p_Result_3_fu_262_p4);
    sensitive << ( s_axis_video_V_data_V_0_data_out );

    SC_METHOD(thread_p_Result_s_fu_248_p4);
    sensitive << ( s_axis_video_V_data_V_0_data_out );

    SC_METHOD(thread_s_axis_video_TDATA_blk_n);
    sensitive << ( s_axis_video_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );

    SC_METHOD(thread_s_axis_video_TREADY);
    sensitive << ( s_axis_video_V_dest_V_0_state );

    SC_METHOD(thread_s_axis_video_V_data_V_0_ack_in);
    sensitive << ( s_axis_video_V_data_V_0_state );

    SC_METHOD(thread_s_axis_video_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_s_axis_video_V_data_V_0_data_out);
    sensitive << ( s_axis_video_V_data_V_0_payload_A );
    sensitive << ( s_axis_video_V_data_V_0_payload_B );
    sensitive << ( s_axis_video_V_data_V_0_sel );

    SC_METHOD(thread_s_axis_video_V_data_V_0_load_A);
    sensitive << ( s_axis_video_V_data_V_0_sel_wr );
    sensitive << ( s_axis_video_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_s_axis_video_V_data_V_0_load_B);
    sensitive << ( s_axis_video_V_data_V_0_sel_wr );
    sensitive << ( s_axis_video_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_s_axis_video_V_data_V_0_sel);
    sensitive << ( s_axis_video_V_data_V_0_sel_rd );

    SC_METHOD(thread_s_axis_video_V_data_V_0_state_cmp_full);
    sensitive << ( s_axis_video_V_data_V_0_state );

    SC_METHOD(thread_s_axis_video_V_data_V_0_vld_in);
    sensitive << ( s_axis_video_TVALID );

    SC_METHOD(thread_s_axis_video_V_data_V_0_vld_out);
    sensitive << ( s_axis_video_V_data_V_0_state );

    SC_METHOD(thread_s_axis_video_V_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_s_axis_video_V_dest_V_0_vld_in);
    sensitive << ( s_axis_video_TVALID );

    SC_METHOD(thread_s_axis_video_V_last_V_0_ack_in);
    sensitive << ( s_axis_video_V_last_V_0_state );

    SC_METHOD(thread_s_axis_video_V_last_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_s_axis_video_V_last_V_0_data_out);
    sensitive << ( s_axis_video_V_last_V_0_payload_A );
    sensitive << ( s_axis_video_V_last_V_0_payload_B );
    sensitive << ( s_axis_video_V_last_V_0_sel );

    SC_METHOD(thread_s_axis_video_V_last_V_0_load_A);
    sensitive << ( s_axis_video_V_last_V_0_sel_wr );
    sensitive << ( s_axis_video_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_s_axis_video_V_last_V_0_load_B);
    sensitive << ( s_axis_video_V_last_V_0_sel_wr );
    sensitive << ( s_axis_video_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_s_axis_video_V_last_V_0_sel);
    sensitive << ( s_axis_video_V_last_V_0_sel_rd );

    SC_METHOD(thread_s_axis_video_V_last_V_0_state_cmp_full);
    sensitive << ( s_axis_video_V_last_V_0_state );

    SC_METHOD(thread_s_axis_video_V_last_V_0_vld_in);
    sensitive << ( s_axis_video_TVALID );

    SC_METHOD(thread_s_axis_video_V_last_V_0_vld_out);
    sensitive << ( s_axis_video_V_last_V_0_state );

    SC_METHOD(thread_s_axis_video_V_user_V_0_ack_in);
    sensitive << ( s_axis_video_V_user_V_0_state );

    SC_METHOD(thread_s_axis_video_V_user_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_s_axis_video_V_user_V_0_data_out);
    sensitive << ( s_axis_video_V_user_V_0_payload_A );
    sensitive << ( s_axis_video_V_user_V_0_payload_B );
    sensitive << ( s_axis_video_V_user_V_0_sel );

    SC_METHOD(thread_s_axis_video_V_user_V_0_load_A);
    sensitive << ( s_axis_video_V_user_V_0_sel_wr );
    sensitive << ( s_axis_video_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_s_axis_video_V_user_V_0_load_B);
    sensitive << ( s_axis_video_V_user_V_0_sel_wr );
    sensitive << ( s_axis_video_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_s_axis_video_V_user_V_0_sel);
    sensitive << ( s_axis_video_V_user_V_0_sel_rd );

    SC_METHOD(thread_s_axis_video_V_user_V_0_state_cmp_full);
    sensitive << ( s_axis_video_V_user_V_0_state );

    SC_METHOD(thread_s_axis_video_V_user_V_0_vld_in);
    sensitive << ( s_axis_video_TVALID );

    SC_METHOD(thread_s_axis_video_V_user_V_0_vld_out);
    sensitive << ( s_axis_video_V_user_V_0_state );

    SC_METHOD(thread_tmp_1_fu_272_p2);
    sensitive << ( tmp_fu_222_p1 );
    sensitive << ( i_cast1_mid2_fu_230_p2 );

    SC_METHOD(thread_tmp_2_fu_226_p1);
    sensitive << ( i_reg_163 );

    SC_METHOD(thread_tmp_3_fu_192_p2);
    sensitive << ( hsize_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_cast_fu_188_p1 );

    SC_METHOD(thread_tmp_4_fu_258_p1);
    sensitive << ( s_axis_video_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_fu_222_p1);
    sensitive << ( j_cast1_mid2_v_fu_214_p3 );

    SC_METHOD(thread_video_o_data_V_fu_292_p3);
    sensitive << ( or_cond_fu_278_p2 );
    sensitive << ( tmp_4_fu_258_p1 );
    sensitive << ( newSel8_fu_284_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_ack_in );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_ack_in );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_ack_in );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_ack_in );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_ack_in );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_ack_in );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_197_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    s_axis_video_V_data_V_0_sel_rd = SC_LOGIC_0;
    s_axis_video_V_data_V_0_sel_wr = SC_LOGIC_0;
    s_axis_video_V_data_V_0_state = "00";
    s_axis_video_V_user_V_0_sel_rd = SC_LOGIC_0;
    s_axis_video_V_user_V_0_sel_wr = SC_LOGIC_0;
    s_axis_video_V_user_V_0_state = "00";
    s_axis_video_V_last_V_0_sel_rd = SC_LOGIC_0;
    s_axis_video_V_last_V_0_sel_wr = SC_LOGIC_0;
    s_axis_video_V_last_V_0_state = "00";
    s_axis_video_V_dest_V_0_state = "00";
    m_axis_video_V_data_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_data_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_data_V_1_state = "00";
    m_axis_video_V_keep_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_keep_V_1_state = "00";
    m_axis_video_V_strb_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_strb_V_1_state = "00";
    m_axis_video_V_user_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_user_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_user_V_1_state = "00";
    m_axis_video_V_last_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_last_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_last_V_1_state = "00";
    m_axis_video_V_id_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_id_V_1_state = "00";
    m_axis_video_V_dest_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rgb2bayer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_axis_video_TDATA, "(port)s_axis_video_TDATA");
    sc_trace(mVcdFile, s_axis_video_TVALID, "(port)s_axis_video_TVALID");
    sc_trace(mVcdFile, s_axis_video_TREADY, "(port)s_axis_video_TREADY");
    sc_trace(mVcdFile, s_axis_video_TKEEP, "(port)s_axis_video_TKEEP");
    sc_trace(mVcdFile, s_axis_video_TSTRB, "(port)s_axis_video_TSTRB");
    sc_trace(mVcdFile, s_axis_video_TUSER, "(port)s_axis_video_TUSER");
    sc_trace(mVcdFile, s_axis_video_TLAST, "(port)s_axis_video_TLAST");
    sc_trace(mVcdFile, s_axis_video_TID, "(port)s_axis_video_TID");
    sc_trace(mVcdFile, s_axis_video_TDEST, "(port)s_axis_video_TDEST");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, hsize_in, "(port)hsize_in");
    sc_trace(mVcdFile, vsize_in, "(port)vsize_in");
    sc_trace(mVcdFile, pattern_V, "(port)pattern_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_data_out, "s_axis_video_V_data_V_0_data_out");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_vld_in, "s_axis_video_V_data_V_0_vld_in");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_vld_out, "s_axis_video_V_data_V_0_vld_out");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_ack_in, "s_axis_video_V_data_V_0_ack_in");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_ack_out, "s_axis_video_V_data_V_0_ack_out");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_payload_A, "s_axis_video_V_data_V_0_payload_A");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_payload_B, "s_axis_video_V_data_V_0_payload_B");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_sel_rd, "s_axis_video_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_sel_wr, "s_axis_video_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_sel, "s_axis_video_V_data_V_0_sel");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_load_A, "s_axis_video_V_data_V_0_load_A");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_load_B, "s_axis_video_V_data_V_0_load_B");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_state, "s_axis_video_V_data_V_0_state");
    sc_trace(mVcdFile, s_axis_video_V_data_V_0_state_cmp_full, "s_axis_video_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_data_out, "s_axis_video_V_user_V_0_data_out");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_vld_in, "s_axis_video_V_user_V_0_vld_in");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_vld_out, "s_axis_video_V_user_V_0_vld_out");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_ack_in, "s_axis_video_V_user_V_0_ack_in");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_ack_out, "s_axis_video_V_user_V_0_ack_out");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_payload_A, "s_axis_video_V_user_V_0_payload_A");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_payload_B, "s_axis_video_V_user_V_0_payload_B");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_sel_rd, "s_axis_video_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_sel_wr, "s_axis_video_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_sel, "s_axis_video_V_user_V_0_sel");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_load_A, "s_axis_video_V_user_V_0_load_A");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_load_B, "s_axis_video_V_user_V_0_load_B");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_state, "s_axis_video_V_user_V_0_state");
    sc_trace(mVcdFile, s_axis_video_V_user_V_0_state_cmp_full, "s_axis_video_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_data_out, "s_axis_video_V_last_V_0_data_out");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_vld_in, "s_axis_video_V_last_V_0_vld_in");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_vld_out, "s_axis_video_V_last_V_0_vld_out");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_ack_in, "s_axis_video_V_last_V_0_ack_in");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_ack_out, "s_axis_video_V_last_V_0_ack_out");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_payload_A, "s_axis_video_V_last_V_0_payload_A");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_payload_B, "s_axis_video_V_last_V_0_payload_B");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_sel_rd, "s_axis_video_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_sel_wr, "s_axis_video_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_sel, "s_axis_video_V_last_V_0_sel");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_load_A, "s_axis_video_V_last_V_0_load_A");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_load_B, "s_axis_video_V_last_V_0_load_B");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_state, "s_axis_video_V_last_V_0_state");
    sc_trace(mVcdFile, s_axis_video_V_last_V_0_state_cmp_full, "s_axis_video_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, s_axis_video_V_dest_V_0_vld_in, "s_axis_video_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, s_axis_video_V_dest_V_0_ack_out, "s_axis_video_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, s_axis_video_V_dest_V_0_state, "s_axis_video_V_dest_V_0_state");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_data_out, "m_axis_video_V_data_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_vld_in, "m_axis_video_V_data_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_vld_out, "m_axis_video_V_data_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_ack_in, "m_axis_video_V_data_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_ack_out, "m_axis_video_V_data_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_payload_A, "m_axis_video_V_data_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_payload_B, "m_axis_video_V_data_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel_rd, "m_axis_video_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel_wr, "m_axis_video_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel, "m_axis_video_V_data_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_load_A, "m_axis_video_V_data_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_load_B, "m_axis_video_V_data_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_state, "m_axis_video_V_data_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_state_cmp_full, "m_axis_video_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_data_out, "m_axis_video_V_keep_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_vld_in, "m_axis_video_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_vld_out, "m_axis_video_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_ack_in, "m_axis_video_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_ack_out, "m_axis_video_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel_rd, "m_axis_video_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel, "m_axis_video_V_keep_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_state, "m_axis_video_V_keep_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_data_out, "m_axis_video_V_strb_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_vld_in, "m_axis_video_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_vld_out, "m_axis_video_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_ack_in, "m_axis_video_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_ack_out, "m_axis_video_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel_rd, "m_axis_video_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel, "m_axis_video_V_strb_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_state, "m_axis_video_V_strb_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_data_out, "m_axis_video_V_user_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_vld_in, "m_axis_video_V_user_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_vld_out, "m_axis_video_V_user_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_ack_in, "m_axis_video_V_user_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_ack_out, "m_axis_video_V_user_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_payload_A, "m_axis_video_V_user_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_payload_B, "m_axis_video_V_user_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel_rd, "m_axis_video_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel_wr, "m_axis_video_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel, "m_axis_video_V_user_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_load_A, "m_axis_video_V_user_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_load_B, "m_axis_video_V_user_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_state, "m_axis_video_V_user_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_state_cmp_full, "m_axis_video_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_data_out, "m_axis_video_V_last_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_vld_in, "m_axis_video_V_last_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_vld_out, "m_axis_video_V_last_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_ack_in, "m_axis_video_V_last_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_ack_out, "m_axis_video_V_last_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_payload_A, "m_axis_video_V_last_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_payload_B, "m_axis_video_V_last_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel_rd, "m_axis_video_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel_wr, "m_axis_video_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel, "m_axis_video_V_last_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_load_A, "m_axis_video_V_last_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_load_B, "m_axis_video_V_last_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_state, "m_axis_video_V_last_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_state_cmp_full, "m_axis_video_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_data_out, "m_axis_video_V_id_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_vld_in, "m_axis_video_V_id_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_vld_out, "m_axis_video_V_id_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_ack_in, "m_axis_video_V_id_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_ack_out, "m_axis_video_V_id_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel_rd, "m_axis_video_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel, "m_axis_video_V_id_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_state, "m_axis_video_V_id_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_data_out, "m_axis_video_V_dest_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_vld_in, "m_axis_video_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_vld_out, "m_axis_video_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_ack_in, "m_axis_video_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_ack_out, "m_axis_video_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel_rd, "m_axis_video_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel, "m_axis_video_V_dest_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_state, "m_axis_video_V_dest_V_1_state");
    sc_trace(mVcdFile, s_axis_video_TDATA_blk_n, "s_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_fu_197_p2, "exitcond_flatten_fu_197_p2");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_flatten_reg_324, "exitcond_flatten_reg_324");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, exitcond_flatten_reg_324_pp0_iter1_reg, "exitcond_flatten_reg_324_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_141, "indvar_flatten_reg_141");
    sc_trace(mVcdFile, j_reg_152, "j_reg_152");
    sc_trace(mVcdFile, i_reg_163, "i_reg_163");
    sc_trace(mVcdFile, bound_fu_182_p2, "bound_fu_182_p2");
    sc_trace(mVcdFile, bound_reg_319, "bound_reg_319");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_202_p2, "indvar_flatten_next_fu_202_p2");
    sc_trace(mVcdFile, j_cast1_mid2_v_fu_214_p3, "j_cast1_mid2_v_fu_214_p3");
    sc_trace(mVcdFile, j_cast1_mid2_v_reg_333, "j_cast1_mid2_v_reg_333");
    sc_trace(mVcdFile, tmp_user_V_reg_338, "tmp_user_V_reg_338");
    sc_trace(mVcdFile, tmp_last_V_reg_343, "tmp_last_V_reg_343");
    sc_trace(mVcdFile, video_o_data_V_fu_292_p3, "video_o_data_V_fu_292_p3");
    sc_trace(mVcdFile, video_o_data_V_reg_348, "video_o_data_V_reg_348");
    sc_trace(mVcdFile, i_1_fu_306_p3, "i_1_fu_306_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_phi_mux_j_phi_fu_156_p4, "ap_phi_mux_j_phi_fu_156_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, bound_fu_182_p0, "bound_fu_182_p0");
    sc_trace(mVcdFile, bound_fu_182_p1, "bound_fu_182_p1");
    sc_trace(mVcdFile, i_cast_fu_188_p1, "i_cast_fu_188_p1");
    sc_trace(mVcdFile, tmp_3_fu_192_p2, "tmp_3_fu_192_p2");
    sc_trace(mVcdFile, j_s_fu_208_p2, "j_s_fu_208_p2");
    sc_trace(mVcdFile, tmp_2_fu_226_p1, "tmp_2_fu_226_p1");
    sc_trace(mVcdFile, tmp_fu_222_p1, "tmp_fu_222_p1");
    sc_trace(mVcdFile, i_cast1_mid2_fu_230_p2, "i_cast1_mid2_fu_230_p2");
    sc_trace(mVcdFile, tmp_1_fu_272_p2, "tmp_1_fu_272_p2");
    sc_trace(mVcdFile, p_Result_3_fu_262_p4, "p_Result_3_fu_262_p4");
    sc_trace(mVcdFile, p_Result_s_fu_248_p4, "p_Result_s_fu_248_p4");
    sc_trace(mVcdFile, or_cond_fu_278_p2, "or_cond_fu_278_p2");
    sc_trace(mVcdFile, tmp_4_fu_258_p1, "tmp_4_fu_258_p1");
    sc_trace(mVcdFile, newSel8_fu_284_p3, "newSel8_fu_284_p3");
    sc_trace(mVcdFile, i_op_fu_300_p2, "i_op_fu_300_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_182_p00, "bound_fu_182_p00");
    sc_trace(mVcdFile, bound_fu_182_p10, "bound_fu_182_p10");
#endif

    }
    mHdltvinHandle.open("rgb2bayer.hdltvin.dat");
    mHdltvoutHandle.open("rgb2bayer.hdltvout.dat");
}

rgb2bayer::~rgb2bayer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void rgb2bayer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_163 = i_1_fu_306_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_163 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_141 = indvar_flatten_next_fu_202_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_141 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_reg_152 = j_cast1_mid2_v_reg_333.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_152 = ap_const_lv31_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_out.read()))) {
            m_axis_video_V_data_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_in.read()))) {
            m_axis_video_V_data_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_data_V_1_state.read())))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_data_V_1_state.read())))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()))))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_out.read()))) {
            m_axis_video_V_dest_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_dest_V_1_state.read())))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read())))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()))))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_out.read()))) {
            m_axis_video_V_id_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_id_V_1_state.read())))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read())))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()))))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_out.read()))) {
            m_axis_video_V_keep_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_keep_V_1_state.read())))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read())))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()))))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_out.read()))) {
            m_axis_video_V_last_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_in.read()))) {
            m_axis_video_V_last_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_last_V_1_state.read())))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read())))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()))))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_out.read()))) {
            m_axis_video_V_strb_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_strb_V_1_state.read())))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read())))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()))))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_out.read()))) {
            m_axis_video_V_user_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_in.read()))) {
            m_axis_video_V_user_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_user_V_1_state.read())))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read())))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()))))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_vld_out.read()))) {
            s_axis_video_V_data_V_0_sel_rd =  (sc_logic) (~s_axis_video_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_ack_in.read()))) {
            s_axis_video_V_data_V_0_sel_wr =  (sc_logic) (~s_axis_video_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            s_axis_video_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            s_axis_video_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(s_axis_video_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_ack_out.read()))))) {
            s_axis_video_V_data_V_0_state = ap_const_lv2_3;
        } else {
            s_axis_video_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, s_axis_video_V_dest_V_0_state.read())))) {
            s_axis_video_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, s_axis_video_V_dest_V_0_state.read())))) {
            s_axis_video_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, s_axis_video_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, s_axis_video_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_dest_V_0_ack_out.read()))))) {
            s_axis_video_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            s_axis_video_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_vld_out.read()))) {
            s_axis_video_V_last_V_0_sel_rd =  (sc_logic) (~s_axis_video_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_ack_in.read()))) {
            s_axis_video_V_last_V_0_sel_wr =  (sc_logic) (~s_axis_video_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, s_axis_video_V_last_V_0_state.read())))) {
            s_axis_video_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, s_axis_video_V_last_V_0_state.read())))) {
            s_axis_video_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, s_axis_video_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, s_axis_video_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_ack_out.read()))))) {
            s_axis_video_V_last_V_0_state = ap_const_lv2_3;
        } else {
            s_axis_video_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_vld_out.read()))) {
            s_axis_video_V_user_V_0_sel_rd =  (sc_logic) (~s_axis_video_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_ack_in.read()))) {
            s_axis_video_V_user_V_0_sel_wr =  (sc_logic) (~s_axis_video_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        s_axis_video_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, s_axis_video_V_user_V_0_state.read())))) {
            s_axis_video_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, s_axis_video_V_user_V_0_state.read())))) {
            s_axis_video_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, s_axis_video_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, s_axis_video_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, s_axis_video_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_ack_out.read()))))) {
            s_axis_video_V_user_V_0_state = ap_const_lv2_3;
        } else {
            s_axis_video_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        bound_reg_319 = bound_fu_182_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_324 = exitcond_flatten_fu_197_p2.read();
        exitcond_flatten_reg_324_pp0_iter1_reg = exitcond_flatten_reg_324.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_cast1_mid2_v_reg_333 = j_cast1_mid2_v_fu_214_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_load_A.read())) {
        m_axis_video_V_data_V_1_payload_A = video_o_data_V_reg_348.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_load_B.read())) {
        m_axis_video_V_data_V_1_payload_B = video_o_data_V_reg_348.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_load_A.read())) {
        m_axis_video_V_last_V_1_payload_A = tmp_last_V_reg_343.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_load_B.read())) {
        m_axis_video_V_last_V_1_payload_B = tmp_last_V_reg_343.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_load_A.read())) {
        m_axis_video_V_user_V_1_payload_A = tmp_user_V_reg_338.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_load_B.read())) {
        m_axis_video_V_user_V_1_payload_B = tmp_user_V_reg_338.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_load_A.read())) {
        s_axis_video_V_data_V_0_payload_A = s_axis_video_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_load_B.read())) {
        s_axis_video_V_data_V_0_payload_B = s_axis_video_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_load_A.read())) {
        s_axis_video_V_last_V_0_payload_A = s_axis_video_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_load_B.read())) {
        s_axis_video_V_last_V_0_payload_B = s_axis_video_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_load_A.read())) {
        s_axis_video_V_user_V_0_payload_A = s_axis_video_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_load_B.read())) {
        s_axis_video_V_user_V_0_payload_B = s_axis_video_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_reg_343 = s_axis_video_V_last_V_0_data_out.read();
        tmp_user_V_reg_338 = s_axis_video_V_user_V_0_data_out.read();
        video_o_data_V_reg_348 = video_o_data_V_fu_292_p3.read();
    }
}

void rgb2bayer::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void rgb2bayer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void rgb2bayer::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void rgb2bayer::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rgb2bayer::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_out.read()));
}

void rgb2bayer::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void rgb2bayer::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void rgb2bayer::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_V_data_V_0_vld_out.read()));
}

void rgb2bayer::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()));
}

void rgb2bayer::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rgb2bayer::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()));
}

void rgb2bayer::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rgb2bayer::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_in.read()));
}

void rgb2bayer::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_197_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void rgb2bayer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rgb2bayer::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void rgb2bayer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rgb2bayer::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void rgb2bayer::thread_ap_phi_mux_j_phi_fu_156_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()))) {
        ap_phi_mux_j_phi_fu_156_p4 = j_cast1_mid2_v_reg_333.read();
    } else {
        ap_phi_mux_j_phi_fu_156_p4 = j_reg_152.read();
    }
}

void rgb2bayer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rgb2bayer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void rgb2bayer::thread_bound_fu_182_p0() {
    bound_fu_182_p0 =  (sc_lv<32>) (bound_fu_182_p00.read());
}

void rgb2bayer::thread_bound_fu_182_p00() {
    bound_fu_182_p00 = esl_zext<64,32>(hsize_in.read());
}

void rgb2bayer::thread_bound_fu_182_p1() {
    bound_fu_182_p1 =  (sc_lv<32>) (bound_fu_182_p10.read());
}

void rgb2bayer::thread_bound_fu_182_p10() {
    bound_fu_182_p10 = esl_zext<64,32>(vsize_in.read());
}

void rgb2bayer::thread_bound_fu_182_p2() {
    bound_fu_182_p2 = (!bound_fu_182_p0.read().is_01() || !bound_fu_182_p1.read().is_01())? sc_lv<64>(): sc_biguint<32>(bound_fu_182_p0.read()) * sc_biguint<32>(bound_fu_182_p1.read());
}

void rgb2bayer::thread_exitcond_flatten_fu_197_p2() {
    exitcond_flatten_fu_197_p2 = (!indvar_flatten_reg_141.read().is_01() || !bound_reg_319.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_141.read() == bound_reg_319.read());
}

void rgb2bayer::thread_i_1_fu_306_p3() {
    i_1_fu_306_p3 = (!tmp_3_fu_192_p2.read()[0].is_01())? sc_lv<31>(): ((tmp_3_fu_192_p2.read()[0].to_bool())? i_op_fu_300_p2.read(): ap_const_lv31_1);
}

void rgb2bayer::thread_i_cast1_mid2_fu_230_p2() {
    i_cast1_mid2_fu_230_p2 = (tmp_3_fu_192_p2.read() & tmp_2_fu_226_p1.read());
}

void rgb2bayer::thread_i_cast_fu_188_p1() {
    i_cast_fu_188_p1 = esl_zext<32,31>(i_reg_163.read());
}

void rgb2bayer::thread_i_op_fu_300_p2() {
    i_op_fu_300_p2 = (!ap_const_lv31_1.is_01() || !i_reg_163.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_1) + sc_biguint<31>(i_reg_163.read()));
}

void rgb2bayer::thread_indvar_flatten_next_fu_202_p2() {
    indvar_flatten_next_fu_202_p2 = (!indvar_flatten_reg_141.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(indvar_flatten_reg_141.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void rgb2bayer::thread_j_cast1_mid2_v_fu_214_p3() {
    j_cast1_mid2_v_fu_214_p3 = (!tmp_3_fu_192_p2.read()[0].is_01())? sc_lv<31>(): ((tmp_3_fu_192_p2.read()[0].to_bool())? ap_phi_mux_j_phi_fu_156_p4.read(): j_s_fu_208_p2.read());
}

void rgb2bayer::thread_j_s_fu_208_p2() {
    j_s_fu_208_p2 = (!ap_const_lv31_1.is_01() || !ap_phi_mux_j_phi_fu_156_p4.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_1) + sc_biguint<31>(ap_phi_mux_j_phi_fu_156_p4.read()));
}

void rgb2bayer::thread_m_axis_video_TDATA() {
    m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324_pp0_iter1_reg.read())))) {
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state.read()[1];
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void rgb2bayer::thread_m_axis_video_TDEST() {
    m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TID() {
    m_axis_video_TID = m_axis_video_V_id_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TKEEP() {
    m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TLAST() {
    m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TSTRB() {
    m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TUSER() {
    m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out.read();
}

void rgb2bayer::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = m_axis_video_V_dest_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_ack_in() {
    m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_ack_out() {
    m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_sel.read())) {
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B.read();
    } else {
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A.read();
    }
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_load_A() {
    m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full.read() & ~m_axis_video_V_data_V_1_sel_wr.read());
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_load_B() {
    m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_sel_wr.read() & m_axis_video_V_data_V_1_state_cmp_full.read());
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_sel() {
    m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_state_cmp_full() {
    m_axis_video_V_data_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_data_V_1_vld_out() {
    m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_dest_V_1_ack_in() {
    m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_dest_V_1_ack_out() {
    m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_dest_V_1_data_out() {
    m_axis_video_V_dest_V_1_data_out = ap_const_lv1_0;
}

void rgb2bayer::thread_m_axis_video_V_dest_V_1_sel() {
    m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_dest_V_1_vld_out() {
    m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_id_V_1_ack_in() {
    m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_id_V_1_ack_out() {
    m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_id_V_1_data_out() {
    m_axis_video_V_id_V_1_data_out = ap_const_lv1_0;
}

void rgb2bayer::thread_m_axis_video_V_id_V_1_sel() {
    m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_id_V_1_vld_out() {
    m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_keep_V_1_ack_in() {
    m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_keep_V_1_ack_out() {
    m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_keep_V_1_data_out() {
    m_axis_video_V_keep_V_1_data_out = ap_const_lv1_0;
}

void rgb2bayer::thread_m_axis_video_V_keep_V_1_sel() {
    m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_keep_V_1_vld_out() {
    m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_ack_in() {
    m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_ack_out() {
    m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_sel.read())) {
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B.read();
    } else {
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A.read();
    }
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_load_A() {
    m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full.read() & ~m_axis_video_V_last_V_1_sel_wr.read());
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_load_B() {
    m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_sel_wr.read() & m_axis_video_V_last_V_1_state_cmp_full.read());
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_sel() {
    m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_state_cmp_full() {
    m_axis_video_V_last_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_last_V_1_vld_out() {
    m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_strb_V_1_ack_in() {
    m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_strb_V_1_ack_out() {
    m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_strb_V_1_data_out() {
    m_axis_video_V_strb_V_1_data_out = ap_const_lv1_0;
}

void rgb2bayer::thread_m_axis_video_V_strb_V_1_sel() {
    m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_strb_V_1_vld_out() {
    m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state.read()[0];
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_ack_in() {
    m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state.read()[1];
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_ack_out() {
    m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY.read();
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_sel.read())) {
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B.read();
    } else {
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A.read();
    }
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_load_A() {
    m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full.read() & ~m_axis_video_V_user_V_1_sel_wr.read());
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_load_B() {
    m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_sel_wr.read() & m_axis_video_V_user_V_1_state_cmp_full.read());
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_sel() {
    m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd.read();
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_state_cmp_full() {
    m_axis_video_V_user_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_324.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void rgb2bayer::thread_m_axis_video_V_user_V_1_vld_out() {
    m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state.read()[0];
}

void rgb2bayer::thread_newSel8_fu_284_p3() {
    newSel8_fu_284_p3 = (!tmp_1_fu_272_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_1_fu_272_p2.read()[0].to_bool())? p_Result_3_fu_262_p4.read(): p_Result_s_fu_248_p4.read());
}

void rgb2bayer::thread_or_cond_fu_278_p2() {
    or_cond_fu_278_p2 = (i_cast1_mid2_fu_230_p2.read() ^ tmp_fu_222_p1.read());
}

void rgb2bayer::thread_p_Result_3_fu_262_p4() {
    p_Result_3_fu_262_p4 = s_axis_video_V_data_V_0_data_out.read().range(15, 8);
}

void rgb2bayer::thread_p_Result_s_fu_248_p4() {
    p_Result_s_fu_248_p4 = s_axis_video_V_data_V_0_data_out.read().range(23, 16);
}

void rgb2bayer::thread_s_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()))) {
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state.read()[0];
    } else {
        s_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void rgb2bayer::thread_s_axis_video_TREADY() {
    s_axis_video_TREADY = s_axis_video_V_dest_V_0_state.read()[1];
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_ack_in() {
    s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state.read()[1];
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        s_axis_video_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        s_axis_video_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_data_V_0_sel.read())) {
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B.read();
    } else {
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A.read();
    }
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_load_A() {
    s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full.read() & ~s_axis_video_V_data_V_0_sel_wr.read());
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_load_B() {
    s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_sel_wr.read() & s_axis_video_V_data_V_0_state_cmp_full.read());
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_sel() {
    s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd.read();
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_state_cmp_full() {
    s_axis_video_V_data_V_0_state_cmp_full =  (sc_logic) ((!s_axis_video_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(s_axis_video_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_vld_in() {
    s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID.read();
}

void rgb2bayer::thread_s_axis_video_V_data_V_0_vld_out() {
    s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state.read()[0];
}

void rgb2bayer::thread_s_axis_video_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        s_axis_video_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        s_axis_video_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void rgb2bayer::thread_s_axis_video_V_dest_V_0_vld_in() {
    s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID.read();
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_ack_in() {
    s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state.read()[1];
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        s_axis_video_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        s_axis_video_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_last_V_0_sel.read())) {
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B.read();
    } else {
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A.read();
    }
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_load_A() {
    s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full.read() & ~s_axis_video_V_last_V_0_sel_wr.read());
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_load_B() {
    s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_sel_wr.read() & s_axis_video_V_last_V_0_state_cmp_full.read());
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_sel() {
    s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd.read();
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_state_cmp_full() {
    s_axis_video_V_last_V_0_state_cmp_full =  (sc_logic) ((!s_axis_video_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(s_axis_video_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_vld_in() {
    s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID.read();
}

void rgb2bayer::thread_s_axis_video_V_last_V_0_vld_out() {
    s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state.read()[0];
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_ack_in() {
    s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state.read()[1];
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_197_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        s_axis_video_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        s_axis_video_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_V_user_V_0_sel.read())) {
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B.read();
    } else {
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A.read();
    }
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_load_A() {
    s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full.read() & ~s_axis_video_V_user_V_0_sel_wr.read());
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_load_B() {
    s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_sel_wr.read() & s_axis_video_V_user_V_0_state_cmp_full.read());
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_sel() {
    s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd.read();
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_state_cmp_full() {
    s_axis_video_V_user_V_0_state_cmp_full =  (sc_logic) ((!s_axis_video_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(s_axis_video_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_vld_in() {
    s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID.read();
}

void rgb2bayer::thread_s_axis_video_V_user_V_0_vld_out() {
    s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state.read()[0];
}

void rgb2bayer::thread_tmp_1_fu_272_p2() {
    tmp_1_fu_272_p2 = (tmp_fu_222_p1.read() | i_cast1_mid2_fu_230_p2.read());
}

void rgb2bayer::thread_tmp_2_fu_226_p1() {
    tmp_2_fu_226_p1 = i_reg_163.read().range(1-1, 0);
}

void rgb2bayer::thread_tmp_3_fu_192_p2() {
    tmp_3_fu_192_p2 = (!i_cast_fu_188_p1.read().is_01() || !hsize_in.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_188_p1.read()) < sc_bigint<32>(hsize_in.read()));
}

void rgb2bayer::thread_tmp_4_fu_258_p1() {
    tmp_4_fu_258_p1 = s_axis_video_V_data_V_0_data_out.read().range(8-1, 0);
}

void rgb2bayer::thread_tmp_fu_222_p1() {
    tmp_fu_222_p1 = j_cast1_mid2_v_fu_214_p3.read().range(1-1, 0);
}

void rgb2bayer::thread_video_o_data_V_fu_292_p3() {
    video_o_data_V_fu_292_p3 = (!or_cond_fu_278_p2.read()[0].is_01())? sc_lv<8>(): ((or_cond_fu_278_p2.read()[0].to_bool())? tmp_4_fu_258_p1.read(): newSel8_fu_284_p3.read());
}

void rgb2bayer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_197_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_197_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void rgb2bayer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDATA\" :  \"" << s_axis_video_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TVALID\" :  \"" << s_axis_video_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axis_video_TREADY\" :  \"" << s_axis_video_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TKEEP\" :  \"" << s_axis_video_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TSTRB\" :  \"" << s_axis_video_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TUSER\" :  \"" << s_axis_video_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TLAST\" :  \"" << s_axis_video_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TID\" :  \"" << s_axis_video_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDEST\" :  \"" << s_axis_video_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hsize_in\" :  \"" << hsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsize_in\" :  \"" << vsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pattern_V\" :  \"" << pattern_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

