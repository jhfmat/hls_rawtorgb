// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rgb2bayer,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=349,HLS_SYN_LUT=698,HLS_VERSION=2018_3}" *)

module rgb2bayer (
        ap_clk,
        ap_rst_n,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in,
        pattern_V
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [0:0] m_axis_video_TKEEP;
output  [0:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;
input  [1:0] pattern_V;

 reg    ap_rst_n_inv;
reg   [23:0] s_axis_video_V_data_V_0_data_out;
wire    s_axis_video_V_data_V_0_vld_in;
wire    s_axis_video_V_data_V_0_vld_out;
wire    s_axis_video_V_data_V_0_ack_in;
reg    s_axis_video_V_data_V_0_ack_out;
reg   [23:0] s_axis_video_V_data_V_0_payload_A;
reg   [23:0] s_axis_video_V_data_V_0_payload_B;
reg    s_axis_video_V_data_V_0_sel_rd;
reg    s_axis_video_V_data_V_0_sel_wr;
wire    s_axis_video_V_data_V_0_sel;
wire    s_axis_video_V_data_V_0_load_A;
wire    s_axis_video_V_data_V_0_load_B;
reg   [1:0] s_axis_video_V_data_V_0_state;
wire    s_axis_video_V_data_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_user_V_0_data_out;
wire    s_axis_video_V_user_V_0_vld_in;
wire    s_axis_video_V_user_V_0_vld_out;
wire    s_axis_video_V_user_V_0_ack_in;
reg    s_axis_video_V_user_V_0_ack_out;
reg   [0:0] s_axis_video_V_user_V_0_payload_A;
reg   [0:0] s_axis_video_V_user_V_0_payload_B;
reg    s_axis_video_V_user_V_0_sel_rd;
reg    s_axis_video_V_user_V_0_sel_wr;
wire    s_axis_video_V_user_V_0_sel;
wire    s_axis_video_V_user_V_0_load_A;
wire    s_axis_video_V_user_V_0_load_B;
reg   [1:0] s_axis_video_V_user_V_0_state;
wire    s_axis_video_V_user_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_last_V_0_data_out;
wire    s_axis_video_V_last_V_0_vld_in;
wire    s_axis_video_V_last_V_0_vld_out;
wire    s_axis_video_V_last_V_0_ack_in;
reg    s_axis_video_V_last_V_0_ack_out;
reg   [0:0] s_axis_video_V_last_V_0_payload_A;
reg   [0:0] s_axis_video_V_last_V_0_payload_B;
reg    s_axis_video_V_last_V_0_sel_rd;
reg    s_axis_video_V_last_V_0_sel_wr;
wire    s_axis_video_V_last_V_0_sel;
wire    s_axis_video_V_last_V_0_load_A;
wire    s_axis_video_V_last_V_0_load_B;
reg   [1:0] s_axis_video_V_last_V_0_state;
wire    s_axis_video_V_last_V_0_state_cmp_full;
wire    s_axis_video_V_dest_V_0_vld_in;
reg    s_axis_video_V_dest_V_0_ack_out;
reg   [1:0] s_axis_video_V_dest_V_0_state;
reg   [7:0] m_axis_video_V_data_V_1_data_out;
reg    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg   [7:0] m_axis_video_V_data_V_1_payload_A;
reg   [7:0] m_axis_video_V_data_V_1_payload_B;
reg    m_axis_video_V_data_V_1_sel_rd;
reg    m_axis_video_V_data_V_1_sel_wr;
wire    m_axis_video_V_data_V_1_sel;
wire    m_axis_video_V_data_V_1_load_A;
wire    m_axis_video_V_data_V_1_load_B;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire    m_axis_video_V_data_V_1_state_cmp_full;
wire   [0:0] m_axis_video_V_keep_V_1_data_out;
reg    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_in;
wire    m_axis_video_V_keep_V_1_ack_out;
reg    m_axis_video_V_keep_V_1_sel_rd;
wire    m_axis_video_V_keep_V_1_sel;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire   [0:0] m_axis_video_V_strb_V_1_data_out;
reg    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_in;
wire    m_axis_video_V_strb_V_1_ack_out;
reg    m_axis_video_V_strb_V_1_sel_rd;
wire    m_axis_video_V_strb_V_1_sel;
reg   [1:0] m_axis_video_V_strb_V_1_state;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
reg    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
reg    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
wire   [0:0] m_axis_video_V_id_V_1_data_out;
reg    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_in;
wire    m_axis_video_V_id_V_1_ack_out;
reg    m_axis_video_V_id_V_1_sel_rd;
wire    m_axis_video_V_id_V_1_sel;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire   [0:0] m_axis_video_V_dest_V_1_data_out;
reg    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_in;
wire    m_axis_video_V_dest_V_1_ack_out;
reg    m_axis_video_V_dest_V_1_sel_rd;
wire    m_axis_video_V_dest_V_1_sel;
reg   [1:0] m_axis_video_V_dest_V_1_state;
reg    s_axis_video_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_flatten_fu_199_p2;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_326;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_flatten_reg_326_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_143;
reg   [30:0] j_reg_154;
reg   [30:0] i_reg_165;
wire    ap_CS_fsm_state1;
wire   [63:0] bound_fu_184_p2;
reg   [63:0] bound_reg_321;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] indvar_flatten_next_fu_204_p2;
wire   [30:0] j_cast1_mid2_v_fu_216_p3;
reg   [30:0] j_cast1_mid2_v_reg_335;
reg   [0:0] tmp_user_V_reg_340;
reg   [0:0] tmp_last_V_reg_345;
wire   [7:0] video_o_data_V_fu_294_p3;
reg   [7:0] video_o_data_V_reg_350;
wire   [30:0] i_1_fu_308_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [30:0] ap_phi_mux_j_phi_fu_158_p4;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_184_p0;
wire   [31:0] bound_fu_184_p1;
wire   [31:0] i_cast_fu_190_p1;
wire   [0:0] tmp_3_fu_194_p2;
wire   [30:0] j_s_fu_210_p2;
wire   [0:0] tmp_2_fu_228_p1;
wire   [0:0] tmp_fu_224_p1;
wire   [0:0] i_cast1_mid2_fu_232_p2;
wire   [0:0] tmp_1_fu_274_p2;
wire   [7:0] p_Result_3_fu_264_p4;
wire   [7:0] p_Result_s_fu_250_p4;
wire   [0:0] or_cond_fu_280_p2;
wire   [7:0] tmp_4_fu_260_p1;
wire   [7:0] newSel8_fu_286_p3;
wire   [30:0] i_op_fu_302_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_184_p00;
wire   [63:0] bound_fu_184_p10;

// power-on initialization
initial begin
#0 s_axis_video_V_data_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_data_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_data_V_0_state = 2'd0;
#0 s_axis_video_V_user_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_user_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_user_V_0_state = 2'd0;
#0 s_axis_video_V_last_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_last_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_last_V_0_state = 2'd0;
#0 s_axis_video_V_dest_V_0_state = 2'd0;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_out == 1'b1) & (m_axis_video_V_data_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_in == 1'b1) & (m_axis_video_V_data_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_wr <= ~m_axis_video_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_ack_out == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_data_V_1_ack_out == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_out == 1'b1) & (m_axis_video_V_dest_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_ack_out == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_dest_V_1_ack_out == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)) & (m_axis_video_V_dest_V_1_state == 2'd3)) | ((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_out == 1'b1) & (m_axis_video_V_id_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_ack_out == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_id_V_1_ack_out == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)) & (m_axis_video_V_id_V_1_state == 2'd3)) | ((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) | ((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_ack_out == 1'b1) & (m_axis_video_V_keep_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_ack_out == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_keep_V_1_ack_out == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)) & (m_axis_video_V_keep_V_1_state == 2'd3)) | ((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_out == 1'b1) & (m_axis_video_V_last_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_in == 1'b1) & (m_axis_video_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_ack_out == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_last_V_1_ack_out == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)) & (m_axis_video_V_last_V_1_state == 2'd3)) | ((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) | ((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_out == 1'b1) & (m_axis_video_V_strb_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_ack_out == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_strb_V_1_ack_out == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)) & (m_axis_video_V_strb_V_1_state == 2'd3)) | ((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) | ((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_out == 1'b1) & (m_axis_video_V_user_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_in == 1'b1) & (m_axis_video_V_user_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_ack_out == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_user_V_1_ack_out == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)) & (m_axis_video_V_user_V_1_state == 2'd3)) | ((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) | ((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_out == 1'b1) & (s_axis_video_V_data_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_rd <= ~s_axis_video_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_in == 1'b1) & (s_axis_video_V_data_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_wr <= ~s_axis_video_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_state == 2'd2)) | ((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_state == 2'd1)) | ((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)) & (s_axis_video_V_data_V_0_state == 2'd3)) | ((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) | ((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)) & (s_axis_video_V_dest_V_0_state == 2'd3)) | ((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) | ((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_out == 1'b1) & (s_axis_video_V_last_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_rd <= ~s_axis_video_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_in == 1'b1) & (s_axis_video_V_last_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_wr <= ~s_axis_video_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)) & (s_axis_video_V_last_V_0_state == 2'd3)) | ((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) | ((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_out == 1'b1) & (s_axis_video_V_user_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_rd <= ~s_axis_video_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_in == 1'b1) & (s_axis_video_V_user_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_wr <= ~s_axis_video_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)) & (s_axis_video_V_user_V_0_state == 2'd3)) | ((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) | ((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_165 <= i_1_fu_308_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_165 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_143 <= indvar_flatten_next_fu_204_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_143 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_154 <= j_cast1_mid2_v_reg_335;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        j_reg_154 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_reg_321 <= bound_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_326 <= exitcond_flatten_fu_199_p2;
        exitcond_flatten_reg_326_pp0_iter1_reg <= exitcond_flatten_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast1_mid2_v_reg_335 <= j_cast1_mid2_v_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_A == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_A <= video_o_data_V_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_B == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_B <= video_o_data_V_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_A == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_B == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_A == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_A <= tmp_user_V_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_B == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_B <= tmp_user_V_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_A == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_B == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_A == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_B == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_A == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_B == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_345 <= s_axis_video_V_last_V_0_data_out;
        tmp_user_V_reg_340 <= s_axis_video_V_user_V_0_data_out;
        video_o_data_V_reg_350 <= video_o_data_V_fu_294_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_199_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_158_p4 = j_cast1_mid2_v_reg_335;
    end else begin
        ap_phi_mux_j_phi_fu_158_p4 = j_reg_154;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_326_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((m_axis_video_V_data_V_1_sel == 1'b1)) begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B;
    end else begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_id_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_last_V_1_sel == 1'b1)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_strb_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_user_V_1_sel == 1'b1)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_326 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_user_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_data_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_data_V_0_sel == 1'b1)) begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B;
    end else begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_dest_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_last_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_last_V_0_sel == 1'b1)) begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B;
    end else begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_user_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_user_V_0_sel == 1'b1)) begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B;
    end else begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_199_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_199_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0) | (m_axis_video_V_data_V_1_ack_in == 1'b0)) & (m_axis_video_V_dest_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_id_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_last_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_user_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_strb_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_keep_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten_fu_199_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_fu_199_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_fu_199_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond_flatten_fu_199_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((exitcond_flatten_reg_326 == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_reg_326_pp0_iter1_reg == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0) | (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_184_p0 = bound_fu_184_p00;

assign bound_fu_184_p00 = hsize_in;

assign bound_fu_184_p1 = bound_fu_184_p10;

assign bound_fu_184_p10 = vsize_in;

assign bound_fu_184_p2 = (bound_fu_184_p0 * bound_fu_184_p1);

assign exitcond_flatten_fu_199_p2 = ((indvar_flatten_reg_143 == bound_reg_321) ? 1'b1 : 1'b0);

assign i_1_fu_308_p3 = ((tmp_3_fu_194_p2[0:0] === 1'b1) ? i_op_fu_302_p2 : 31'd1);

assign i_cast1_mid2_fu_232_p2 = (tmp_3_fu_194_p2 & tmp_2_fu_228_p1);

assign i_cast_fu_190_p1 = i_reg_165;

assign i_op_fu_302_p2 = (31'd1 + i_reg_165);

assign indvar_flatten_next_fu_204_p2 = (indvar_flatten_reg_143 + 64'd1);

assign j_cast1_mid2_v_fu_216_p3 = ((tmp_3_fu_194_p2[0:0] === 1'b1) ? ap_phi_mux_j_phi_fu_158_p4 : j_s_fu_210_p2);

assign j_s_fu_210_p2 = (31'd1 + ap_phi_mux_j_phi_fu_158_p4);

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full & ~m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_state_cmp_full & m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_state_cmp_full = ((m_axis_video_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state[1'd1];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_data_out = 1'd0;

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state[1'd1];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_data_out = 1'd0;

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state[1'd1];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_data_out = 1'd0;

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state[1'd1];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_data_out = 1'd0;

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

assign newSel8_fu_286_p3 = ((tmp_1_fu_274_p2[0:0] === 1'b1) ? p_Result_3_fu_264_p4 : p_Result_s_fu_250_p4);

assign or_cond_fu_280_p2 = (tmp_fu_224_p1 ^ i_cast1_mid2_fu_232_p2);

assign p_Result_3_fu_264_p4 = {{s_axis_video_V_data_V_0_data_out[15:8]}};

assign p_Result_s_fu_250_p4 = {{s_axis_video_V_data_V_0_data_out[23:16]}};

assign s_axis_video_TREADY = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full & ~s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_state_cmp_full & s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd;

assign s_axis_video_V_data_V_0_state_cmp_full = ((s_axis_video_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state[1'd0];

assign s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state[1'd1];

assign s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full & ~s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_state_cmp_full & s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd;

assign s_axis_video_V_last_V_0_state_cmp_full = ((s_axis_video_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state[1'd0];

assign s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state[1'd1];

assign s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full & ~s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_state_cmp_full & s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd;

assign s_axis_video_V_user_V_0_state_cmp_full = ((s_axis_video_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state[1'd0];

assign tmp_1_fu_274_p2 = (tmp_fu_224_p1 | i_cast1_mid2_fu_232_p2);

assign tmp_2_fu_228_p1 = i_reg_165[0:0];

assign tmp_3_fu_194_p2 = (($signed(i_cast_fu_190_p1) < $signed(hsize_in)) ? 1'b1 : 1'b0);

assign tmp_4_fu_260_p1 = s_axis_video_V_data_V_0_data_out[7:0];

assign tmp_fu_224_p1 = j_cast1_mid2_v_fu_216_p3[0:0];

assign video_o_data_V_fu_294_p3 = ((or_cond_fu_280_p2[0:0] === 1'b1) ? tmp_4_fu_260_p1 : newSel8_fu_286_p3);

endmodule //rgb2bayer
