-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb2bayer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    vsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    pattern_V : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of rgb2bayer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rgb2bayer,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=349,HLS_SYN_LUT=698,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal s_axis_video_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video_V_data_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_data_V_0_vld_out : STD_LOGIC;
    signal s_axis_video_V_data_V_0_ack_in : STD_LOGIC;
    signal s_axis_video_V_data_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal s_axis_video_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_video_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_video_V_data_V_0_sel : STD_LOGIC;
    signal s_axis_video_V_data_V_0_load_A : STD_LOGIC;
    signal s_axis_video_V_data_V_0_load_B : STD_LOGIC;
    signal s_axis_video_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal s_axis_video_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_user_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_user_V_0_vld_out : STD_LOGIC;
    signal s_axis_video_V_user_V_0_ack_in : STD_LOGIC;
    signal s_axis_video_V_user_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_video_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_video_V_user_V_0_sel : STD_LOGIC;
    signal s_axis_video_V_user_V_0_load_A : STD_LOGIC;
    signal s_axis_video_V_user_V_0_load_B : STD_LOGIC;
    signal s_axis_video_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal s_axis_video_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_last_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_last_V_0_vld_out : STD_LOGIC;
    signal s_axis_video_V_last_V_0_ack_in : STD_LOGIC;
    signal s_axis_video_V_last_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_video_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_video_V_last_V_0_sel : STD_LOGIC;
    signal s_axis_video_V_last_V_0_load_A : STD_LOGIC;
    signal s_axis_video_V_last_V_0_load_B : STD_LOGIC;
    signal s_axis_video_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal s_axis_video_V_dest_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_dest_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_video_V_data_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_video_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_video_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_data_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_data_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_keep_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_keep_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_strb_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_strb_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_id_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_id_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_dest_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_dest_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_143 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_154 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_165 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bound_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_321 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast1_mid2_v_fu_216_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast1_mid2_v_reg_335 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_user_V_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal video_o_data_V_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal video_o_data_V_reg_350 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_308_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_j_phi_fu_158_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_fu_210_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_228_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_224_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast1_mid2_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_250_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel8_fu_286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_fu_302_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_184_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_184_p10 : STD_LOGIC_VECTOR (63 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_data_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_data_V_1_sel_rd <= not(m_axis_video_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_data_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_data_V_1_sel_wr <= not(m_axis_video_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_data_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_data_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_dest_V_1_sel_rd <= not(m_axis_video_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_dest_V_1_state = ap_const_lv2_2) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_dest_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_dest_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_2) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_id_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_id_V_1_sel_rd <= not(m_axis_video_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_id_V_1_state = ap_const_lv2_2) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_id_V_1_state = ap_const_lv2_1) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_id_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_id_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_id_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_1) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_2) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_keep_V_1_sel_rd <= not(m_axis_video_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_keep_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_keep_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_last_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_last_V_1_sel_rd <= not(m_axis_video_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_last_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_last_V_1_sel_wr <= not(m_axis_video_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_last_V_1_state = ap_const_lv2_2) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_last_V_1_state = ap_const_lv2_1) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_last_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_last_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_1) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_2) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_strb_V_1_sel_rd <= not(m_axis_video_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_strb_V_1_state = ap_const_lv2_2) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_strb_V_1_state = ap_const_lv2_1) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_strb_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_strb_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_1) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_2) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_user_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_user_V_1_sel_rd <= not(m_axis_video_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_user_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_user_V_1_sel_wr <= not(m_axis_video_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_user_V_1_state = ap_const_lv2_2) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_user_V_1_state = ap_const_lv2_1) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_user_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_V_user_V_1_ack_out = ap_const_logic_0) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_user_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_1) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_2) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((s_axis_video_V_data_V_0_ack_out = ap_const_logic_1) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        s_axis_video_V_data_V_0_sel_rd <= not(s_axis_video_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((s_axis_video_V_data_V_0_ack_in = ap_const_logic_1) and (s_axis_video_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        s_axis_video_V_data_V_0_sel_wr <= not(s_axis_video_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((s_axis_video_V_data_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_data_V_0_state = ap_const_lv2_2)) or ((s_axis_video_V_data_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_data_V_0_state = ap_const_lv2_3) and (s_axis_video_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((s_axis_video_V_data_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_data_V_0_state = ap_const_lv2_1)) or ((s_axis_video_V_data_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_data_V_0_state = ap_const_lv2_3) and (s_axis_video_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((s_axis_video_V_data_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_data_V_0_ack_out = ap_const_logic_1))) and not(((s_axis_video_V_data_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_data_V_0_vld_in = ap_const_logic_1))) and (s_axis_video_V_data_V_0_state = ap_const_lv2_3)) or ((s_axis_video_V_data_V_0_state = ap_const_lv2_1) and (s_axis_video_V_data_V_0_ack_out = ap_const_logic_1)) or ((s_axis_video_V_data_V_0_state = ap_const_lv2_2) and (s_axis_video_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((s_axis_video_V_dest_V_0_state = ap_const_lv2_2) and (s_axis_video_V_dest_V_0_vld_in = ap_const_logic_0)) or ((s_axis_video_V_dest_V_0_state = ap_const_lv2_3) and (s_axis_video_V_dest_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((s_axis_video_V_dest_V_0_state = ap_const_lv2_1) and (s_axis_video_V_dest_V_0_ack_out = ap_const_logic_0)) or ((s_axis_video_V_dest_V_0_state = ap_const_lv2_3) and (s_axis_video_V_dest_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((s_axis_video_V_dest_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((s_axis_video_V_dest_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_dest_V_0_vld_in = ap_const_logic_1))) and (s_axis_video_V_dest_V_0_state = ap_const_lv2_3)) or ((s_axis_video_V_dest_V_0_state = ap_const_lv2_1) and (s_axis_video_V_dest_V_0_ack_out = ap_const_logic_1)) or ((s_axis_video_V_dest_V_0_state = ap_const_lv2_2) and (s_axis_video_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((s_axis_video_V_last_V_0_ack_out = ap_const_logic_1) and (s_axis_video_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        s_axis_video_V_last_V_0_sel_rd <= not(s_axis_video_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((s_axis_video_V_last_V_0_ack_in = ap_const_logic_1) and (s_axis_video_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        s_axis_video_V_last_V_0_sel_wr <= not(s_axis_video_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((s_axis_video_V_last_V_0_state = ap_const_lv2_2) and (s_axis_video_V_last_V_0_vld_in = ap_const_logic_0)) or ((s_axis_video_V_last_V_0_state = ap_const_lv2_3) and (s_axis_video_V_last_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((s_axis_video_V_last_V_0_state = ap_const_lv2_1) and (s_axis_video_V_last_V_0_ack_out = ap_const_logic_0)) or ((s_axis_video_V_last_V_0_state = ap_const_lv2_3) and (s_axis_video_V_last_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((s_axis_video_V_last_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_last_V_0_ack_out = ap_const_logic_1))) and not(((s_axis_video_V_last_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_last_V_0_vld_in = ap_const_logic_1))) and (s_axis_video_V_last_V_0_state = ap_const_lv2_3)) or ((s_axis_video_V_last_V_0_state = ap_const_lv2_1) and (s_axis_video_V_last_V_0_ack_out = ap_const_logic_1)) or ((s_axis_video_V_last_V_0_state = ap_const_lv2_2) and (s_axis_video_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((s_axis_video_V_user_V_0_ack_out = ap_const_logic_1) and (s_axis_video_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        s_axis_video_V_user_V_0_sel_rd <= not(s_axis_video_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((s_axis_video_V_user_V_0_ack_in = ap_const_logic_1) and (s_axis_video_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        s_axis_video_V_user_V_0_sel_wr <= not(s_axis_video_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                s_axis_video_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((s_axis_video_V_user_V_0_state = ap_const_lv2_2) and (s_axis_video_V_user_V_0_vld_in = ap_const_logic_0)) or ((s_axis_video_V_user_V_0_state = ap_const_lv2_3) and (s_axis_video_V_user_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((s_axis_video_V_user_V_0_state = ap_const_lv2_1) and (s_axis_video_V_user_V_0_ack_out = ap_const_logic_0)) or ((s_axis_video_V_user_V_0_state = ap_const_lv2_3) and (s_axis_video_V_user_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((s_axis_video_V_user_V_0_vld_in = ap_const_logic_0) and (s_axis_video_V_user_V_0_ack_out = ap_const_logic_1))) and not(((s_axis_video_V_user_V_0_ack_out = ap_const_logic_0) and (s_axis_video_V_user_V_0_vld_in = ap_const_logic_1))) and (s_axis_video_V_user_V_0_state = ap_const_lv2_3)) or ((s_axis_video_V_user_V_0_state = ap_const_lv2_1) and (s_axis_video_V_user_V_0_ack_out = ap_const_logic_1)) or ((s_axis_video_V_user_V_0_state = ap_const_lv2_2) and (s_axis_video_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_165 <= i_1_fu_308_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_165 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_143 <= indvar_flatten_next_fu_204_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                indvar_flatten_reg_143 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_154 <= j_cast1_mid2_v_reg_335;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                j_reg_154 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bound_reg_321 <= bound_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_326 <= exitcond_flatten_fu_199_p2;
                exitcond_flatten_reg_326_pp0_iter1_reg <= exitcond_flatten_reg_326;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_cast1_mid2_v_reg_335 <= j_cast1_mid2_v_fu_216_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_data_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_data_V_1_payload_A <= video_o_data_V_reg_350;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_data_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_data_V_1_payload_B <= video_o_data_V_reg_350;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_last_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_345;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_last_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_345;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_user_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_user_V_1_payload_A <= tmp_user_V_reg_340;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_user_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_user_V_1_payload_B <= tmp_user_V_reg_340;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((s_axis_video_V_data_V_0_load_A = ap_const_logic_1)) then
                s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((s_axis_video_V_data_V_0_load_B = ap_const_logic_1)) then
                s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((s_axis_video_V_last_V_0_load_A = ap_const_logic_1)) then
                s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((s_axis_video_V_last_V_0_load_B = ap_const_logic_1)) then
                s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((s_axis_video_V_user_V_0_load_A = ap_const_logic_1)) then
                s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((s_axis_video_V_user_V_0_load_B = ap_const_logic_1)) then
                s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_345 <= s_axis_video_V_last_V_0_data_out;
                tmp_user_V_reg_340 <= s_axis_video_V_user_V_0_data_out;
                video_o_data_V_reg_350 <= video_o_data_V_fu_294_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (m_axis_video_V_data_V_1_ack_in, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_ack_in, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_ack_in, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_ack_in, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_ack_in, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_ack_in, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_ack_in, m_axis_video_V_dest_V_1_state, ap_CS_fsm, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((m_axis_video_V_dest_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_id_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_last_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_user_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_strb_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_keep_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_data_V_1_ack_in = ap_const_logic_0))) and (m_axis_video_V_dest_V_1_state(0) = ap_const_logic_0) and (m_axis_video_V_id_V_1_state(0) = ap_const_logic_0) and (m_axis_video_V_last_V_1_state(0) = ap_const_logic_0) and (m_axis_video_V_user_V_1_state(0) = ap_const_logic_0) and (m_axis_video_V_strb_V_1_state(0) = ap_const_logic_0) and (m_axis_video_V_keep_V_1_state(0) = ap_const_logic_0) and (m_axis_video_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(s_axis_video_V_data_V_0_vld_out, exitcond_flatten_fu_199_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(m_axis_video_V_data_V_1_ack_in, exitcond_flatten_reg_326)
    begin
                ap_block_state3_io <= ((exitcond_flatten_reg_326 = ap_const_lv1_0) and (m_axis_video_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axis_video_V_data_V_1_ack_in, exitcond_flatten_reg_326_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((exitcond_flatten_reg_326_pp0_iter1_reg = ap_const_lv1_0) and (m_axis_video_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(m_axis_video_V_data_V_1_ack_in, m_axis_video_V_keep_V_1_ack_in, m_axis_video_V_strb_V_1_ack_in, m_axis_video_V_user_V_1_ack_in, m_axis_video_V_last_V_1_ack_in, m_axis_video_V_id_V_1_ack_in, m_axis_video_V_dest_V_1_ack_in)
    begin
                ap_block_state5 <= ((m_axis_video_V_dest_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_id_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_last_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_user_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_strb_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_keep_V_1_ack_in = ap_const_logic_0) or (m_axis_video_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_199_p2)
    begin
        if ((exitcond_flatten_fu_199_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_158_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, j_reg_154, j_cast1_mid2_v_reg_335)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_158_p4 <= j_cast1_mid2_v_reg_335;
        else 
            ap_phi_mux_j_phi_fu_158_p4 <= j_reg_154;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_184_p0 <= bound_fu_184_p00(32 - 1 downto 0);
    bound_fu_184_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hsize_in),64));
    bound_fu_184_p1 <= bound_fu_184_p10(32 - 1 downto 0);
    bound_fu_184_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vsize_in),64));
    bound_fu_184_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_184_p0) * unsigned(bound_fu_184_p1), 64));
    exitcond_flatten_fu_199_p2 <= "1" when (indvar_flatten_reg_143 = bound_reg_321) else "0";
    i_1_fu_308_p3 <= 
        i_op_fu_302_p2 when (tmp_3_fu_194_p2(0) = '1') else 
        ap_const_lv31_1;
    i_cast1_mid2_fu_232_p2 <= (tmp_3_fu_194_p2 and tmp_2_fu_228_p1);
    i_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_165),32));
    i_op_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i_reg_165));
    indvar_flatten_next_fu_204_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_143) + unsigned(ap_const_lv64_1));
    j_cast1_mid2_v_fu_216_p3 <= 
        ap_phi_mux_j_phi_fu_158_p4 when (tmp_3_fu_194_p2(0) = '1') else 
        j_s_fu_210_p2;
    j_s_fu_210_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_j_phi_fu_158_p4));
    m_axis_video_TDATA <= m_axis_video_V_data_V_1_data_out;

    m_axis_video_TDATA_blk_n_assign_proc : process(m_axis_video_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_326_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_326_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_V_data_V_1_state(1);
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDEST <= m_axis_video_V_dest_V_1_data_out;
    m_axis_video_TID <= m_axis_video_V_id_V_1_data_out;
    m_axis_video_TKEEP <= m_axis_video_V_keep_V_1_data_out;
    m_axis_video_TLAST <= m_axis_video_V_last_V_1_data_out;
    m_axis_video_TSTRB <= m_axis_video_V_strb_V_1_data_out;
    m_axis_video_TUSER <= m_axis_video_V_user_V_1_data_out;
    m_axis_video_TVALID <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_data_V_1_ack_in <= m_axis_video_V_data_V_1_state(1);
    m_axis_video_V_data_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_data_V_1_data_out_assign_proc : process(m_axis_video_V_data_V_1_payload_A, m_axis_video_V_data_V_1_payload_B, m_axis_video_V_data_V_1_sel)
    begin
        if ((m_axis_video_V_data_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_data_V_1_data_out <= m_axis_video_V_data_V_1_payload_B;
        else 
            m_axis_video_V_data_V_1_data_out <= m_axis_video_V_data_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_data_V_1_load_A <= (m_axis_video_V_data_V_1_state_cmp_full and not(m_axis_video_V_data_V_1_sel_wr));
    m_axis_video_V_data_V_1_load_B <= (m_axis_video_V_data_V_1_state_cmp_full and m_axis_video_V_data_V_1_sel_wr);
    m_axis_video_V_data_V_1_sel <= m_axis_video_V_data_V_1_sel_rd;
    m_axis_video_V_data_V_1_state_cmp_full <= '0' when (m_axis_video_V_data_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_data_V_1_vld_out <= m_axis_video_V_data_V_1_state(0);
    m_axis_video_V_dest_V_1_ack_in <= m_axis_video_V_dest_V_1_state(1);
    m_axis_video_V_dest_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_dest_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_dest_V_1_sel <= m_axis_video_V_dest_V_1_sel_rd;

    m_axis_video_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_dest_V_1_vld_out <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_id_V_1_ack_in <= m_axis_video_V_id_V_1_state(1);
    m_axis_video_V_id_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_id_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_id_V_1_sel <= m_axis_video_V_id_V_1_sel_rd;

    m_axis_video_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_id_V_1_vld_out <= m_axis_video_V_id_V_1_state(0);
    m_axis_video_V_keep_V_1_ack_in <= m_axis_video_V_keep_V_1_state(1);
    m_axis_video_V_keep_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_keep_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_keep_V_1_sel <= m_axis_video_V_keep_V_1_sel_rd;

    m_axis_video_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_keep_V_1_vld_out <= m_axis_video_V_keep_V_1_state(0);
    m_axis_video_V_last_V_1_ack_in <= m_axis_video_V_last_V_1_state(1);
    m_axis_video_V_last_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_last_V_1_data_out_assign_proc : process(m_axis_video_V_last_V_1_payload_A, m_axis_video_V_last_V_1_payload_B, m_axis_video_V_last_V_1_sel)
    begin
        if ((m_axis_video_V_last_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_B;
        else 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_last_V_1_load_A <= (m_axis_video_V_last_V_1_state_cmp_full and not(m_axis_video_V_last_V_1_sel_wr));
    m_axis_video_V_last_V_1_load_B <= (m_axis_video_V_last_V_1_state_cmp_full and m_axis_video_V_last_V_1_sel_wr);
    m_axis_video_V_last_V_1_sel <= m_axis_video_V_last_V_1_sel_rd;
    m_axis_video_V_last_V_1_state_cmp_full <= '0' when (m_axis_video_V_last_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_last_V_1_vld_out <= m_axis_video_V_last_V_1_state(0);
    m_axis_video_V_strb_V_1_ack_in <= m_axis_video_V_strb_V_1_state(1);
    m_axis_video_V_strb_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_strb_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_strb_V_1_sel <= m_axis_video_V_strb_V_1_sel_rd;

    m_axis_video_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_strb_V_1_vld_out <= m_axis_video_V_strb_V_1_state(0);
    m_axis_video_V_user_V_1_ack_in <= m_axis_video_V_user_V_1_state(1);
    m_axis_video_V_user_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_user_V_1_data_out_assign_proc : process(m_axis_video_V_user_V_1_payload_A, m_axis_video_V_user_V_1_payload_B, m_axis_video_V_user_V_1_sel)
    begin
        if ((m_axis_video_V_user_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_B;
        else 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_user_V_1_load_A <= (m_axis_video_V_user_V_1_state_cmp_full and not(m_axis_video_V_user_V_1_sel_wr));
    m_axis_video_V_user_V_1_load_B <= (m_axis_video_V_user_V_1_state_cmp_full and m_axis_video_V_user_V_1_sel_wr);
    m_axis_video_V_user_V_1_sel <= m_axis_video_V_user_V_1_sel_rd;
    m_axis_video_V_user_V_1_state_cmp_full <= '0' when (m_axis_video_V_user_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_326, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_326 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_user_V_1_vld_out <= m_axis_video_V_user_V_1_state(0);
    newSel8_fu_286_p3 <= 
        p_Result_3_fu_264_p4 when (tmp_1_fu_274_p2(0) = '1') else 
        p_Result_s_fu_250_p4;
    or_cond_fu_280_p2 <= (tmp_fu_224_p1 xor i_cast1_mid2_fu_232_p2);
    p_Result_3_fu_264_p4 <= s_axis_video_V_data_V_0_data_out(15 downto 8);
    p_Result_s_fu_250_p4 <= s_axis_video_V_data_V_0_data_out(23 downto 16);

    s_axis_video_TDATA_blk_n_assign_proc : process(s_axis_video_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, exitcond_flatten_fu_199_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_TDATA_blk_n <= s_axis_video_V_data_V_0_state(0);
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_video_TREADY <= s_axis_video_V_dest_V_0_state(1);
    s_axis_video_V_data_V_0_ack_in <= s_axis_video_V_data_V_0_state(1);

    s_axis_video_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_V_data_V_0_data_out_assign_proc : process(s_axis_video_V_data_V_0_payload_A, s_axis_video_V_data_V_0_payload_B, s_axis_video_V_data_V_0_sel)
    begin
        if ((s_axis_video_V_data_V_0_sel = ap_const_logic_1)) then 
            s_axis_video_V_data_V_0_data_out <= s_axis_video_V_data_V_0_payload_B;
        else 
            s_axis_video_V_data_V_0_data_out <= s_axis_video_V_data_V_0_payload_A;
        end if; 
    end process;

    s_axis_video_V_data_V_0_load_A <= (s_axis_video_V_data_V_0_state_cmp_full and not(s_axis_video_V_data_V_0_sel_wr));
    s_axis_video_V_data_V_0_load_B <= (s_axis_video_V_data_V_0_state_cmp_full and s_axis_video_V_data_V_0_sel_wr);
    s_axis_video_V_data_V_0_sel <= s_axis_video_V_data_V_0_sel_rd;
    s_axis_video_V_data_V_0_state_cmp_full <= '0' when (s_axis_video_V_data_V_0_state = ap_const_lv2_1) else '1';
    s_axis_video_V_data_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_data_V_0_vld_out <= s_axis_video_V_data_V_0_state(0);

    s_axis_video_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    s_axis_video_V_dest_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_last_V_0_ack_in <= s_axis_video_V_last_V_0_state(1);

    s_axis_video_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_V_last_V_0_data_out_assign_proc : process(s_axis_video_V_last_V_0_payload_A, s_axis_video_V_last_V_0_payload_B, s_axis_video_V_last_V_0_sel)
    begin
        if ((s_axis_video_V_last_V_0_sel = ap_const_logic_1)) then 
            s_axis_video_V_last_V_0_data_out <= s_axis_video_V_last_V_0_payload_B;
        else 
            s_axis_video_V_last_V_0_data_out <= s_axis_video_V_last_V_0_payload_A;
        end if; 
    end process;

    s_axis_video_V_last_V_0_load_A <= (s_axis_video_V_last_V_0_state_cmp_full and not(s_axis_video_V_last_V_0_sel_wr));
    s_axis_video_V_last_V_0_load_B <= (s_axis_video_V_last_V_0_state_cmp_full and s_axis_video_V_last_V_0_sel_wr);
    s_axis_video_V_last_V_0_sel <= s_axis_video_V_last_V_0_sel_rd;
    s_axis_video_V_last_V_0_state_cmp_full <= '0' when (s_axis_video_V_last_V_0_state = ap_const_lv2_1) else '1';
    s_axis_video_V_last_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_last_V_0_vld_out <= s_axis_video_V_last_V_0_state(0);
    s_axis_video_V_user_V_0_ack_in <= s_axis_video_V_user_V_0_state(1);

    s_axis_video_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_V_user_V_0_data_out_assign_proc : process(s_axis_video_V_user_V_0_payload_A, s_axis_video_V_user_V_0_payload_B, s_axis_video_V_user_V_0_sel)
    begin
        if ((s_axis_video_V_user_V_0_sel = ap_const_logic_1)) then 
            s_axis_video_V_user_V_0_data_out <= s_axis_video_V_user_V_0_payload_B;
        else 
            s_axis_video_V_user_V_0_data_out <= s_axis_video_V_user_V_0_payload_A;
        end if; 
    end process;

    s_axis_video_V_user_V_0_load_A <= (s_axis_video_V_user_V_0_state_cmp_full and not(s_axis_video_V_user_V_0_sel_wr));
    s_axis_video_V_user_V_0_load_B <= (s_axis_video_V_user_V_0_state_cmp_full and s_axis_video_V_user_V_0_sel_wr);
    s_axis_video_V_user_V_0_sel <= s_axis_video_V_user_V_0_sel_rd;
    s_axis_video_V_user_V_0_state_cmp_full <= '0' when (s_axis_video_V_user_V_0_state = ap_const_lv2_1) else '1';
    s_axis_video_V_user_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_user_V_0_vld_out <= s_axis_video_V_user_V_0_state(0);
    tmp_1_fu_274_p2 <= (tmp_fu_224_p1 or i_cast1_mid2_fu_232_p2);
    tmp_2_fu_228_p1 <= i_reg_165(1 - 1 downto 0);
    tmp_3_fu_194_p2 <= "1" when (signed(i_cast_fu_190_p1) < signed(hsize_in)) else "0";
    tmp_4_fu_260_p1 <= s_axis_video_V_data_V_0_data_out(8 - 1 downto 0);
    tmp_fu_224_p1 <= j_cast1_mid2_v_fu_216_p3(1 - 1 downto 0);
    video_o_data_V_fu_294_p3 <= 
        tmp_4_fu_260_p1 when (or_cond_fu_280_p2(0) = '1') else 
        newSel8_fu_286_p3;
end behav;
