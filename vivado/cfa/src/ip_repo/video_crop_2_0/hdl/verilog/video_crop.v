// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="video_crop,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=362,HLS_SYN_LUT=706,HLS_VERSION=2018_3}" *)

module video_crop (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] s_axis_video_V_data_V_0_data_out;
wire    s_axis_video_V_data_V_0_vld_in;
wire    s_axis_video_V_data_V_0_vld_out;
wire    s_axis_video_V_data_V_0_ack_in;
reg    s_axis_video_V_data_V_0_ack_out;
reg   [23:0] s_axis_video_V_data_V_0_payload_A;
reg   [23:0] s_axis_video_V_data_V_0_payload_B;
reg    s_axis_video_V_data_V_0_sel_rd;
reg    s_axis_video_V_data_V_0_sel_wr;
wire    s_axis_video_V_data_V_0_sel;
wire    s_axis_video_V_data_V_0_load_A;
wire    s_axis_video_V_data_V_0_load_B;
reg   [1:0] s_axis_video_V_data_V_0_state;
wire    s_axis_video_V_data_V_0_state_cmp_full;
reg   [2:0] s_axis_video_V_keep_V_0_data_out;
wire    s_axis_video_V_keep_V_0_vld_in;
wire    s_axis_video_V_keep_V_0_vld_out;
wire    s_axis_video_V_keep_V_0_ack_in;
reg    s_axis_video_V_keep_V_0_ack_out;
reg   [2:0] s_axis_video_V_keep_V_0_payload_A;
reg   [2:0] s_axis_video_V_keep_V_0_payload_B;
reg    s_axis_video_V_keep_V_0_sel_rd;
reg    s_axis_video_V_keep_V_0_sel_wr;
wire    s_axis_video_V_keep_V_0_sel;
wire    s_axis_video_V_keep_V_0_load_A;
wire    s_axis_video_V_keep_V_0_load_B;
reg   [1:0] s_axis_video_V_keep_V_0_state;
wire    s_axis_video_V_keep_V_0_state_cmp_full;
reg   [2:0] s_axis_video_V_strb_V_0_data_out;
wire    s_axis_video_V_strb_V_0_vld_in;
wire    s_axis_video_V_strb_V_0_vld_out;
wire    s_axis_video_V_strb_V_0_ack_in;
reg    s_axis_video_V_strb_V_0_ack_out;
reg   [2:0] s_axis_video_V_strb_V_0_payload_A;
reg   [2:0] s_axis_video_V_strb_V_0_payload_B;
reg    s_axis_video_V_strb_V_0_sel_rd;
reg    s_axis_video_V_strb_V_0_sel_wr;
wire    s_axis_video_V_strb_V_0_sel;
wire    s_axis_video_V_strb_V_0_load_A;
wire    s_axis_video_V_strb_V_0_load_B;
reg   [1:0] s_axis_video_V_strb_V_0_state;
wire    s_axis_video_V_strb_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_user_V_0_data_out;
wire    s_axis_video_V_user_V_0_vld_in;
wire    s_axis_video_V_user_V_0_vld_out;
wire    s_axis_video_V_user_V_0_ack_in;
reg    s_axis_video_V_user_V_0_ack_out;
reg   [0:0] s_axis_video_V_user_V_0_payload_A;
reg   [0:0] s_axis_video_V_user_V_0_payload_B;
reg    s_axis_video_V_user_V_0_sel_rd;
reg    s_axis_video_V_user_V_0_sel_wr;
wire    s_axis_video_V_user_V_0_sel;
wire    s_axis_video_V_user_V_0_load_A;
wire    s_axis_video_V_user_V_0_load_B;
reg   [1:0] s_axis_video_V_user_V_0_state;
wire    s_axis_video_V_user_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_last_V_0_data_out;
wire    s_axis_video_V_last_V_0_vld_in;
wire    s_axis_video_V_last_V_0_vld_out;
wire    s_axis_video_V_last_V_0_ack_in;
reg    s_axis_video_V_last_V_0_ack_out;
reg   [0:0] s_axis_video_V_last_V_0_payload_A;
reg   [0:0] s_axis_video_V_last_V_0_payload_B;
reg    s_axis_video_V_last_V_0_sel_rd;
reg    s_axis_video_V_last_V_0_sel_wr;
wire    s_axis_video_V_last_V_0_sel;
wire    s_axis_video_V_last_V_0_load_A;
wire    s_axis_video_V_last_V_0_load_B;
reg   [1:0] s_axis_video_V_last_V_0_state;
wire    s_axis_video_V_last_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_id_V_0_data_out;
wire    s_axis_video_V_id_V_0_vld_in;
wire    s_axis_video_V_id_V_0_vld_out;
wire    s_axis_video_V_id_V_0_ack_in;
reg    s_axis_video_V_id_V_0_ack_out;
reg   [0:0] s_axis_video_V_id_V_0_payload_A;
reg   [0:0] s_axis_video_V_id_V_0_payload_B;
reg    s_axis_video_V_id_V_0_sel_rd;
reg    s_axis_video_V_id_V_0_sel_wr;
wire    s_axis_video_V_id_V_0_sel;
wire    s_axis_video_V_id_V_0_load_A;
wire    s_axis_video_V_id_V_0_load_B;
reg   [1:0] s_axis_video_V_id_V_0_state;
wire    s_axis_video_V_id_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_dest_V_0_data_out;
wire    s_axis_video_V_dest_V_0_vld_in;
wire    s_axis_video_V_dest_V_0_vld_out;
wire    s_axis_video_V_dest_V_0_ack_in;
reg    s_axis_video_V_dest_V_0_ack_out;
reg   [0:0] s_axis_video_V_dest_V_0_payload_A;
reg   [0:0] s_axis_video_V_dest_V_0_payload_B;
reg    s_axis_video_V_dest_V_0_sel_rd;
reg    s_axis_video_V_dest_V_0_sel_wr;
wire    s_axis_video_V_dest_V_0_sel;
wire    s_axis_video_V_dest_V_0_load_A;
wire    s_axis_video_V_dest_V_0_load_B;
reg   [1:0] s_axis_video_V_dest_V_0_state;
wire    s_axis_video_V_dest_V_0_state_cmp_full;
reg   [23:0] m_axis_video_V_data_V_1_data_out;
reg    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg   [23:0] m_axis_video_V_data_V_1_payload_A;
reg   [23:0] m_axis_video_V_data_V_1_payload_B;
reg    m_axis_video_V_data_V_1_sel_rd;
reg    m_axis_video_V_data_V_1_sel_wr;
wire    m_axis_video_V_data_V_1_sel;
wire    m_axis_video_V_data_V_1_load_A;
wire    m_axis_video_V_data_V_1_load_B;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire    m_axis_video_V_data_V_1_state_cmp_full;
reg   [2:0] m_axis_video_V_keep_V_1_data_out;
reg    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_in;
wire    m_axis_video_V_keep_V_1_ack_out;
reg   [2:0] m_axis_video_V_keep_V_1_payload_A;
reg   [2:0] m_axis_video_V_keep_V_1_payload_B;
reg    m_axis_video_V_keep_V_1_sel_rd;
reg    m_axis_video_V_keep_V_1_sel_wr;
wire    m_axis_video_V_keep_V_1_sel;
wire    m_axis_video_V_keep_V_1_load_A;
wire    m_axis_video_V_keep_V_1_load_B;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire    m_axis_video_V_keep_V_1_state_cmp_full;
reg   [2:0] m_axis_video_V_strb_V_1_data_out;
reg    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_in;
wire    m_axis_video_V_strb_V_1_ack_out;
reg   [2:0] m_axis_video_V_strb_V_1_payload_A;
reg   [2:0] m_axis_video_V_strb_V_1_payload_B;
reg    m_axis_video_V_strb_V_1_sel_rd;
reg    m_axis_video_V_strb_V_1_sel_wr;
wire    m_axis_video_V_strb_V_1_sel;
wire    m_axis_video_V_strb_V_1_load_A;
wire    m_axis_video_V_strb_V_1_load_B;
reg   [1:0] m_axis_video_V_strb_V_1_state;
wire    m_axis_video_V_strb_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
reg    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
reg    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_id_V_1_data_out;
reg    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_in;
wire    m_axis_video_V_id_V_1_ack_out;
reg   [0:0] m_axis_video_V_id_V_1_payload_A;
reg   [0:0] m_axis_video_V_id_V_1_payload_B;
reg    m_axis_video_V_id_V_1_sel_rd;
reg    m_axis_video_V_id_V_1_sel_wr;
wire    m_axis_video_V_id_V_1_sel;
wire    m_axis_video_V_id_V_1_load_A;
wire    m_axis_video_V_id_V_1_load_B;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire    m_axis_video_V_id_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_dest_V_1_data_out;
reg    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_in;
wire    m_axis_video_V_dest_V_1_ack_out;
reg   [0:0] m_axis_video_V_dest_V_1_payload_A;
reg   [0:0] m_axis_video_V_dest_V_1_payload_B;
reg    m_axis_video_V_dest_V_1_sel_rd;
reg    m_axis_video_V_dest_V_1_sel_wr;
wire    m_axis_video_V_dest_V_1_sel;
wire    m_axis_video_V_dest_V_1_load_A;
wire    m_axis_video_V_dest_V_1_load_B;
reg   [1:0] m_axis_video_V_dest_V_1_state;
wire    m_axis_video_V_dest_V_1_state_cmp_full;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_flatten_fu_144_p2;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_188;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_flatten_reg_188_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_119;
wire   [63:0] bound_fu_138_p2;
reg   [63:0] bound_reg_183;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] indvar_flatten_next_fu_149_p2;
reg   [23:0] tmp_data_V_reg_197;
reg   [2:0] tmp_keep_V_reg_202;
reg   [2:0] tmp_strb_V_reg_207;
reg   [0:0] tmp_user_V_reg_212;
reg   [0:0] tmp_last_V_reg_217;
reg   [0:0] tmp_id_V_reg_222;
reg   [0:0] tmp_dest_V_reg_227;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_138_p0;
wire   [31:0] bound_fu_138_p1;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_138_p00;
wire   [63:0] bound_fu_138_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 s_axis_video_V_data_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_data_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_data_V_0_state = 2'd0;
#0 s_axis_video_V_keep_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_keep_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_keep_V_0_state = 2'd0;
#0 s_axis_video_V_strb_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_strb_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_strb_V_0_state = 2'd0;
#0 s_axis_video_V_user_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_user_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_user_V_0_state = 2'd0;
#0 s_axis_video_V_last_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_last_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_last_V_0_state = 2'd0;
#0 s_axis_video_V_id_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_id_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_id_V_0_state = 2'd0;
#0 s_axis_video_V_dest_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_dest_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_dest_V_0_state = 2'd0;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_out == 1'b1) & (m_axis_video_V_data_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_in == 1'b1) & (m_axis_video_V_data_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_wr <= ~m_axis_video_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_ack_out == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_data_V_1_ack_out == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_out == 1'b1) & (m_axis_video_V_dest_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_in == 1'b1) & (m_axis_video_V_dest_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_wr <= ~m_axis_video_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_ack_out == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_dest_V_1_ack_out == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)) & (m_axis_video_V_dest_V_1_state == 2'd3)) | ((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_out == 1'b1) & (m_axis_video_V_id_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_in == 1'b1) & (m_axis_video_V_id_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_wr <= ~m_axis_video_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_ack_out == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_id_V_1_ack_out == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)) & (m_axis_video_V_id_V_1_state == 2'd3)) | ((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) | ((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_ack_out == 1'b1) & (m_axis_video_V_keep_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_ack_in == 1'b1) & (m_axis_video_V_keep_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_wr <= ~m_axis_video_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_ack_out == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_keep_V_1_ack_out == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)) & (m_axis_video_V_keep_V_1_state == 2'd3)) | ((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_out == 1'b1) & (m_axis_video_V_last_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_in == 1'b1) & (m_axis_video_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_ack_out == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_last_V_1_ack_out == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)) & (m_axis_video_V_last_V_1_state == 2'd3)) | ((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) | ((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_out == 1'b1) & (m_axis_video_V_strb_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_in == 1'b1) & (m_axis_video_V_strb_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_wr <= ~m_axis_video_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_ack_out == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_strb_V_1_ack_out == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)) & (m_axis_video_V_strb_V_1_state == 2'd3)) | ((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) | ((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_out == 1'b1) & (m_axis_video_V_user_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_in == 1'b1) & (m_axis_video_V_user_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_ack_out == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) & ~((m_axis_video_V_user_V_1_ack_out == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)) & (m_axis_video_V_user_V_1_state == 2'd3)) | ((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) | ((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_out == 1'b1) & (s_axis_video_V_data_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_rd <= ~s_axis_video_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_in == 1'b1) & (s_axis_video_V_data_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_wr <= ~s_axis_video_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)) & (s_axis_video_V_data_V_0_state == 2'd3)) | ((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) | ((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_dest_V_0_ack_out == 1'b1) & (s_axis_video_V_dest_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_dest_V_0_sel_rd <= ~s_axis_video_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_dest_V_0_ack_in == 1'b1) & (s_axis_video_V_dest_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_dest_V_0_sel_wr <= ~s_axis_video_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)) & (s_axis_video_V_dest_V_0_state == 2'd3)) | ((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) | ((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_id_V_0_ack_out == 1'b1) & (s_axis_video_V_id_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_id_V_0_sel_rd <= ~s_axis_video_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_id_V_0_ack_in == 1'b1) & (s_axis_video_V_id_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_id_V_0_sel_wr <= ~s_axis_video_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_id_V_0_state == 2'd2) & (s_axis_video_V_id_V_0_vld_in == 1'b0)) | ((s_axis_video_V_id_V_0_state == 2'd3) & (s_axis_video_V_id_V_0_vld_in == 1'b0) & (s_axis_video_V_id_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_id_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_id_V_0_state == 2'd1) & (s_axis_video_V_id_V_0_ack_out == 1'b0)) | ((s_axis_video_V_id_V_0_state == 2'd3) & (s_axis_video_V_id_V_0_ack_out == 1'b0) & (s_axis_video_V_id_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_id_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_id_V_0_vld_in == 1'b0) & (s_axis_video_V_id_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_id_V_0_ack_out == 1'b0) & (s_axis_video_V_id_V_0_vld_in == 1'b1)) & (s_axis_video_V_id_V_0_state == 2'd3)) | ((s_axis_video_V_id_V_0_state == 2'd1) & (s_axis_video_V_id_V_0_ack_out == 1'b1)) | ((s_axis_video_V_id_V_0_state == 2'd2) & (s_axis_video_V_id_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_id_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_keep_V_0_ack_out == 1'b1) & (s_axis_video_V_keep_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_keep_V_0_sel_rd <= ~s_axis_video_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_keep_V_0_ack_in == 1'b1) & (s_axis_video_V_keep_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_keep_V_0_sel_wr <= ~s_axis_video_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_keep_V_0_state == 2'd2) & (s_axis_video_V_keep_V_0_vld_in == 1'b0)) | ((s_axis_video_V_keep_V_0_state == 2'd3) & (s_axis_video_V_keep_V_0_vld_in == 1'b0) & (s_axis_video_V_keep_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_keep_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_keep_V_0_state == 2'd1) & (s_axis_video_V_keep_V_0_ack_out == 1'b0)) | ((s_axis_video_V_keep_V_0_state == 2'd3) & (s_axis_video_V_keep_V_0_ack_out == 1'b0) & (s_axis_video_V_keep_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_keep_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_keep_V_0_vld_in == 1'b0) & (s_axis_video_V_keep_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_keep_V_0_ack_out == 1'b0) & (s_axis_video_V_keep_V_0_vld_in == 1'b1)) & (s_axis_video_V_keep_V_0_state == 2'd3)) | ((s_axis_video_V_keep_V_0_state == 2'd1) & (s_axis_video_V_keep_V_0_ack_out == 1'b1)) | ((s_axis_video_V_keep_V_0_state == 2'd2) & (s_axis_video_V_keep_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_keep_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_out == 1'b1) & (s_axis_video_V_last_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_rd <= ~s_axis_video_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_in == 1'b1) & (s_axis_video_V_last_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_wr <= ~s_axis_video_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)) & (s_axis_video_V_last_V_0_state == 2'd3)) | ((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) | ((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_strb_V_0_ack_out == 1'b1) & (s_axis_video_V_strb_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_strb_V_0_sel_rd <= ~s_axis_video_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_strb_V_0_ack_in == 1'b1) & (s_axis_video_V_strb_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_strb_V_0_sel_wr <= ~s_axis_video_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_strb_V_0_state == 2'd2) & (s_axis_video_V_strb_V_0_vld_in == 1'b0)) | ((s_axis_video_V_strb_V_0_state == 2'd3) & (s_axis_video_V_strb_V_0_vld_in == 1'b0) & (s_axis_video_V_strb_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_strb_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_strb_V_0_state == 2'd1) & (s_axis_video_V_strb_V_0_ack_out == 1'b0)) | ((s_axis_video_V_strb_V_0_state == 2'd3) & (s_axis_video_V_strb_V_0_ack_out == 1'b0) & (s_axis_video_V_strb_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_strb_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_strb_V_0_vld_in == 1'b0) & (s_axis_video_V_strb_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_strb_V_0_ack_out == 1'b0) & (s_axis_video_V_strb_V_0_vld_in == 1'b1)) & (s_axis_video_V_strb_V_0_state == 2'd3)) | ((s_axis_video_V_strb_V_0_state == 2'd1) & (s_axis_video_V_strb_V_0_ack_out == 1'b1)) | ((s_axis_video_V_strb_V_0_state == 2'd2) & (s_axis_video_V_strb_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_strb_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_out == 1'b1) & (s_axis_video_V_user_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_rd <= ~s_axis_video_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_in == 1'b1) & (s_axis_video_V_user_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_wr <= ~s_axis_video_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_video_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)) & (s_axis_video_V_user_V_0_state == 2'd3)) | ((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) | ((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_119 <= indvar_flatten_next_fu_149_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_119 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_183 <= bound_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_188 <= exitcond_flatten_fu_144_p2;
        exitcond_flatten_reg_188_pp0_iter1_reg <= exitcond_flatten_reg_188;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_A == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_A <= tmp_data_V_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_B == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_B <= tmp_data_V_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_dest_V_1_load_A == 1'b1)) begin
        m_axis_video_V_dest_V_1_payload_A <= tmp_dest_V_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_dest_V_1_load_B == 1'b1)) begin
        m_axis_video_V_dest_V_1_payload_B <= tmp_dest_V_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_id_V_1_load_A == 1'b1)) begin
        m_axis_video_V_id_V_1_payload_A <= tmp_id_V_reg_222;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_id_V_1_load_B == 1'b1)) begin
        m_axis_video_V_id_V_1_payload_B <= tmp_id_V_reg_222;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_keep_V_1_load_A == 1'b1)) begin
        m_axis_video_V_keep_V_1_payload_A <= tmp_keep_V_reg_202;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_keep_V_1_load_B == 1'b1)) begin
        m_axis_video_V_keep_V_1_payload_B <= tmp_keep_V_reg_202;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_A == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_B == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_strb_V_1_load_A == 1'b1)) begin
        m_axis_video_V_strb_V_1_payload_A <= tmp_strb_V_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_strb_V_1_load_B == 1'b1)) begin
        m_axis_video_V_strb_V_1_payload_B <= tmp_strb_V_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_A == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_A <= tmp_user_V_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_B == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_B <= tmp_user_V_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_A == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_B == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_dest_V_0_load_A == 1'b1)) begin
        s_axis_video_V_dest_V_0_payload_A <= s_axis_video_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_dest_V_0_load_B == 1'b1)) begin
        s_axis_video_V_dest_V_0_payload_B <= s_axis_video_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_id_V_0_load_A == 1'b1)) begin
        s_axis_video_V_id_V_0_payload_A <= s_axis_video_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_id_V_0_load_B == 1'b1)) begin
        s_axis_video_V_id_V_0_payload_B <= s_axis_video_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_keep_V_0_load_A == 1'b1)) begin
        s_axis_video_V_keep_V_0_payload_A <= s_axis_video_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_keep_V_0_load_B == 1'b1)) begin
        s_axis_video_V_keep_V_0_payload_B <= s_axis_video_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_A == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_B == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_strb_V_0_load_A == 1'b1)) begin
        s_axis_video_V_strb_V_0_payload_A <= s_axis_video_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_strb_V_0_load_B == 1'b1)) begin
        s_axis_video_V_strb_V_0_payload_B <= s_axis_video_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_A == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_B == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_reg_197 <= s_axis_video_V_data_V_0_data_out;
        tmp_dest_V_reg_227 <= s_axis_video_V_dest_V_0_data_out;
        tmp_id_V_reg_222 <= s_axis_video_V_id_V_0_data_out;
        tmp_keep_V_reg_202 <= s_axis_video_V_keep_V_0_data_out;
        tmp_last_V_reg_217 <= s_axis_video_V_last_V_0_data_out;
        tmp_strb_V_reg_207 <= s_axis_video_V_strb_V_0_data_out;
        tmp_user_V_reg_212 <= s_axis_video_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0) | (m_axis_video_V_data_V_1_ack_in == 1'b0)) & (m_axis_video_V_dest_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_id_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_last_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_user_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_strb_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_keep_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0) | (m_axis_video_V_data_V_1_ack_in == 1'b0)) & (m_axis_video_V_dest_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_id_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_last_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_user_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_strb_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_keep_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_188_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((m_axis_video_V_data_V_1_sel == 1'b1)) begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B;
    end else begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_dest_V_1_sel == 1'b1)) begin
        m_axis_video_V_dest_V_1_data_out = m_axis_video_V_dest_V_1_payload_B;
    end else begin
        m_axis_video_V_dest_V_1_data_out = m_axis_video_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_id_V_1_sel == 1'b1)) begin
        m_axis_video_V_id_V_1_data_out = m_axis_video_V_id_V_1_payload_B;
    end else begin
        m_axis_video_V_id_V_1_data_out = m_axis_video_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_id_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_keep_V_1_sel == 1'b1)) begin
        m_axis_video_V_keep_V_1_data_out = m_axis_video_V_keep_V_1_payload_B;
    end else begin
        m_axis_video_V_keep_V_1_data_out = m_axis_video_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_last_V_1_sel == 1'b1)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_strb_V_1_sel == 1'b1)) begin
        m_axis_video_V_strb_V_1_data_out = m_axis_video_V_strb_V_1_payload_B;
    end else begin
        m_axis_video_V_strb_V_1_data_out = m_axis_video_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_strb_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_user_V_1_sel == 1'b1)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_user_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_data_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_data_V_0_sel == 1'b1)) begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B;
    end else begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_dest_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_dest_V_0_sel == 1'b1)) begin
        s_axis_video_V_dest_V_0_data_out = s_axis_video_V_dest_V_0_payload_B;
    end else begin
        s_axis_video_V_dest_V_0_data_out = s_axis_video_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_id_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_id_V_0_sel == 1'b1)) begin
        s_axis_video_V_id_V_0_data_out = s_axis_video_V_id_V_0_payload_B;
    end else begin
        s_axis_video_V_id_V_0_data_out = s_axis_video_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_keep_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_keep_V_0_sel == 1'b1)) begin
        s_axis_video_V_keep_V_0_data_out = s_axis_video_V_keep_V_0_payload_B;
    end else begin
        s_axis_video_V_keep_V_0_data_out = s_axis_video_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_last_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_last_V_0_sel == 1'b1)) begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B;
    end else begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_strb_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_strb_V_0_sel == 1'b1)) begin
        s_axis_video_V_strb_V_0_data_out = s_axis_video_V_strb_V_0_payload_B;
    end else begin
        s_axis_video_V_strb_V_0_data_out = s_axis_video_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_V_user_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_user_V_0_sel == 1'b1)) begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B;
    end else begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0) | (m_axis_video_V_data_V_1_ack_in == 1'b0)) & (m_axis_video_V_dest_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_id_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_last_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_user_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_strb_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_keep_V_1_state[1'd0] == 1'b0) & (m_axis_video_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten_fu_144_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_fu_144_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_fu_144_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond_flatten_fu_144_p2 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((exitcond_flatten_reg_188 == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_reg_188_pp0_iter1_reg == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((m_axis_video_V_dest_V_1_ack_in == 1'b0) | (m_axis_video_V_id_V_1_ack_in == 1'b0) | (m_axis_video_V_last_V_1_ack_in == 1'b0) | (m_axis_video_V_user_V_1_ack_in == 1'b0) | (m_axis_video_V_strb_V_1_ack_in == 1'b0) | (m_axis_video_V_keep_V_1_ack_in == 1'b0) | (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_138_p0 = bound_fu_138_p00;

assign bound_fu_138_p00 = hsize_in;

assign bound_fu_138_p1 = bound_fu_138_p10;

assign bound_fu_138_p10 = vsize_in;

assign bound_fu_138_p2 = (bound_fu_138_p0 * bound_fu_138_p1);

assign exitcond_flatten_fu_144_p2 = ((indvar_flatten_reg_119 == bound_reg_183) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_149_p2 = (indvar_flatten_reg_119 + 64'd1);

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full & ~m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_state_cmp_full & m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_state_cmp_full = ((m_axis_video_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state[1'd1];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_load_A = (m_axis_video_V_dest_V_1_state_cmp_full & ~m_axis_video_V_dest_V_1_sel_wr);

assign m_axis_video_V_dest_V_1_load_B = (m_axis_video_V_dest_V_1_state_cmp_full & m_axis_video_V_dest_V_1_sel_wr);

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_state_cmp_full = ((m_axis_video_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state[1'd1];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_load_A = (m_axis_video_V_id_V_1_state_cmp_full & ~m_axis_video_V_id_V_1_sel_wr);

assign m_axis_video_V_id_V_1_load_B = (m_axis_video_V_id_V_1_state_cmp_full & m_axis_video_V_id_V_1_sel_wr);

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_state_cmp_full = ((m_axis_video_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state[1'd1];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_load_A = (m_axis_video_V_keep_V_1_state_cmp_full & ~m_axis_video_V_keep_V_1_sel_wr);

assign m_axis_video_V_keep_V_1_load_B = (m_axis_video_V_keep_V_1_state_cmp_full & m_axis_video_V_keep_V_1_sel_wr);

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_state_cmp_full = ((m_axis_video_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state[1'd1];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_load_A = (m_axis_video_V_strb_V_1_state_cmp_full & ~m_axis_video_V_strb_V_1_sel_wr);

assign m_axis_video_V_strb_V_1_load_B = (m_axis_video_V_strb_V_1_state_cmp_full & m_axis_video_V_strb_V_1_sel_wr);

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_state_cmp_full = ((m_axis_video_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

assign s_axis_video_TREADY = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full & ~s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_state_cmp_full & s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd;

assign s_axis_video_V_data_V_0_state_cmp_full = ((s_axis_video_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state[1'd0];

assign s_axis_video_V_dest_V_0_ack_in = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_dest_V_0_load_A = (s_axis_video_V_dest_V_0_state_cmp_full & ~s_axis_video_V_dest_V_0_sel_wr);

assign s_axis_video_V_dest_V_0_load_B = (s_axis_video_V_dest_V_0_state_cmp_full & s_axis_video_V_dest_V_0_sel_wr);

assign s_axis_video_V_dest_V_0_sel = s_axis_video_V_dest_V_0_sel_rd;

assign s_axis_video_V_dest_V_0_state_cmp_full = ((s_axis_video_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_dest_V_0_vld_out = s_axis_video_V_dest_V_0_state[1'd0];

assign s_axis_video_V_id_V_0_ack_in = s_axis_video_V_id_V_0_state[1'd1];

assign s_axis_video_V_id_V_0_load_A = (s_axis_video_V_id_V_0_state_cmp_full & ~s_axis_video_V_id_V_0_sel_wr);

assign s_axis_video_V_id_V_0_load_B = (s_axis_video_V_id_V_0_state_cmp_full & s_axis_video_V_id_V_0_sel_wr);

assign s_axis_video_V_id_V_0_sel = s_axis_video_V_id_V_0_sel_rd;

assign s_axis_video_V_id_V_0_state_cmp_full = ((s_axis_video_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_id_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_id_V_0_vld_out = s_axis_video_V_id_V_0_state[1'd0];

assign s_axis_video_V_keep_V_0_ack_in = s_axis_video_V_keep_V_0_state[1'd1];

assign s_axis_video_V_keep_V_0_load_A = (s_axis_video_V_keep_V_0_state_cmp_full & ~s_axis_video_V_keep_V_0_sel_wr);

assign s_axis_video_V_keep_V_0_load_B = (s_axis_video_V_keep_V_0_state_cmp_full & s_axis_video_V_keep_V_0_sel_wr);

assign s_axis_video_V_keep_V_0_sel = s_axis_video_V_keep_V_0_sel_rd;

assign s_axis_video_V_keep_V_0_state_cmp_full = ((s_axis_video_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_keep_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_keep_V_0_vld_out = s_axis_video_V_keep_V_0_state[1'd0];

assign s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state[1'd1];

assign s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full & ~s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_state_cmp_full & s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd;

assign s_axis_video_V_last_V_0_state_cmp_full = ((s_axis_video_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state[1'd0];

assign s_axis_video_V_strb_V_0_ack_in = s_axis_video_V_strb_V_0_state[1'd1];

assign s_axis_video_V_strb_V_0_load_A = (s_axis_video_V_strb_V_0_state_cmp_full & ~s_axis_video_V_strb_V_0_sel_wr);

assign s_axis_video_V_strb_V_0_load_B = (s_axis_video_V_strb_V_0_state_cmp_full & s_axis_video_V_strb_V_0_sel_wr);

assign s_axis_video_V_strb_V_0_sel = s_axis_video_V_strb_V_0_sel_rd;

assign s_axis_video_V_strb_V_0_state_cmp_full = ((s_axis_video_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_strb_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_strb_V_0_vld_out = s_axis_video_V_strb_V_0_state[1'd0];

assign s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state[1'd1];

assign s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full & ~s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_state_cmp_full & s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd;

assign s_axis_video_V_user_V_0_state_cmp_full = ((s_axis_video_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state[1'd0];

endmodule //video_crop
